//Need to check if we are on mobile or desktop to set our appropriate zoom for svg
function isMobileDevice() {
	    return (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1);
};

var svgElement = document.getElementById('svgElem');
if(isMobileDevice()) {
	svgElement.style.height = "auto";
	svgElement.style.width = "100%";
}else{
	svgElement.style.height = "50%";
	svgElement.style.width = "50%";
}

//COLOR CHOICES FOR OUR TRANSITIONS!
var blueColor = '#00FFFF';
var redColor = '#f90000';
// var orangeColor = '#ff3d00';
var orangeColor = '#ffa500';
var purpleColor = '#FF00FF';
var greenColor = '#00FF00';

//Only load in items on first launch
var carouselLaunched = 0;

//alternative way to test for mobile debatably more thorough
var isMobile = false; //initiate as false
// device detection
if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) { 
    isMobile = true;
}

//Formatting Solution for SVG animation of spotlight unerline
var pageSelect0 = document.getElementById("pageSelect0");
var pS0Container = document.getElementById("pageSelect0C");
pageSelect0.style.left = (pS0Container.offsetWidth - pageSelect0.offsetWidth)/2 + "px";

var pageSelect1 = document.getElementById("pageSelect1");
var pS1Container = document.getElementById("pageSelect1C");
pageSelect1.style.left = (pS1Container.offsetWidth - pageSelect1.offsetWidth)/2 + "px";

var pageSelect2 = document.getElementById("pageSelect2");
var pS2Container = document.getElementById("pageSelect2C");
pageSelect2.style.left = (pS2Container.offsetWidth - pageSelect2.offsetWidth)/2 + "px";

var pageSelect3 = document.getElementById("pageSelect3");
var pS3Container = document.getElementById("pageSelect3C");
pageSelect3.style.left = (pS3Container.offsetWidth - pageSelect3.offsetWidth)/2 + "px";

window.onresize = function(event){

	//Formatting Solution for SVG animation of spotlight unerline
	var pageSelect0 = document.getElementById("pageSelect0");
	var pS0Container = document.getElementById("pageSelect0C");
	pageSelect0.style.left = (pS0Container.offsetWidth - pageSelect0.offsetWidth)/2 + "px";

	var pageSelect1 = document.getElementById("pageSelect1");
	var pS1Container = document.getElementById("pageSelect1C");
	pageSelect1.style.left = (pS1Container.offsetWidth - pageSelect1.offsetWidth)/2 + "px";

	var pageSelect2 = document.getElementById("pageSelect2");
	var pS2Container = document.getElementById("pageSelect2C");
	pageSelect2.style.left = (pS2Container.offsetWidth - pageSelect2.offsetWidth)/2 + "px";

	var pageSelect3 = document.getElementById("pageSelect3");
	var pS3Container = document.getElementById("pageSelect3C");
	pageSelect3.style.left = (pS3Container.offsetWidth - pageSelect3.offsetWidth)/2 + "px";

}

//detect if triangles are explode or not
var explode = false;

//content of each carousel page
var stagContent = {
	card0: {
		title: 'Dartmouth College',
		subTitle: "B.A in Engineering Sciences and a B.E in Computer Engineering",
		content: "Relevant Courses: ",
		//insert link to RESUME page
		link: '../../../projects/tibet/public/pages/language.html',
		linkImg:'../../../media/projects/Carousel/endlessKnot.png',
	}, 
	card1:{
		title:'Track and Field',
		subTitle: 'Senior Captain',
		content: 'Middle distance runner specializing in the 800m. Ivy League Championship 3rd Place 4x800 relay. Margerie Chase Award Recipient.',
		link: '',
		linkImg:'',
	}, 
	card2:{
		title: 'Work Experience',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card3:{
		title: 'Website Design',
		subTitle:'',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card4:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card5:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card6:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card7:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
};

//content of each carousel page
var wolfContent = {
	card0: {
		title: 'Tibet',
		subTitle: "Visualizing a Tibetan Nomad's Artwork with ThreeJS",
		content: "For this project I partnered with Dartmouth's Anthropology department to create a 3D navigable rendition of the Qinghai Province in Tibet. In this 3D creation, users are able to freely navigate throughout the region and explore over 300 different toponyms ranging from regional religious sites to local settlments.<br><br>",
		link: '../../../projects/tibet/public/pages/language.html',
		linkImg:'../../../media/projects/Carousel/endlessKnot.png',
	}, 
	card1:{
		title:'Architecture',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card2:{
		title: 'Leaflet',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card3:{
		title: 'Ray Tracing',
		subTitle:'',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card4:{
		title: 'Phong Shading',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card5:{
		title: 'ThreeJS',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card6:{
		title: 'Utah Teapot',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card7:{
		title: 'Skinning',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
};

var bullContent = {
	card0: {
		title: 'Code',
		subTitle: "",
		content: "Wow Coding so Cool!",
		link: '../../../projects/tibet/public/pages/language.html',
		linkImg:'../../../media/projects/Carousel/endlessKnot.png',
	}, 
	card1:{
		title:'More Code',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card2:{
		title: 'Leaflet',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card3:{
		title: 'Ray Tracing',
		subTitle:'',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card4:{
		title: 'Phong Shading',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card5:{
		title: 'ThreeJS',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card6:{
		title: 'Utah Teapot',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card7:{
		title: 'Skinning',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
};

//content of each carousel page
var boarContent = {
	card0: {
		title: 'Me, Myself, and I',
		subTitle: "",
		content: "Coding, Engineering, Running, Photography, Hiking",
		link: '../../../projects/tibet/public/pages/language.html',
		linkImg:'../../../media/projects/Carousel/endlessKnot.png',
	}, 
	card1:{
		title:'Track & Field',
		subTitle: 'Senior Captain',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card2:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card3:{
		title: '',
		subTitle:'',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card4:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card5:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card6:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
	card7:{
		title: '',
		subTitle: '',
		content: '',
		link: '',
		linkImg:'',
	}, 
};







//Wolf paths 
var wPaths = [
     {id:"#path1000",d:"M 62.006529,54.853808 57.997486,89.866114 72.430041,95.746045 Z"},
     {id:"#path1002",d:"M 62.006529,54.853808 73.766388,67.950013 79.913587,90.667924 Z"},
     {id:"#path1004",d:"M 79.913585,90.667924 72.430041,95.746045 62.006529,54.853808 Z"},
     {id:"#path1006",d:"M 73.766388,67.950013 89.000752,85.055264 79.913585,90.667924 Z"},
     {id:"#path1008",d:"M 62.006529,54.853808 93.277064,77.304447 89.00075,85.055262 Z"},
     {id:"#path1010",d:"M 112.52047,76.769909 144.05827,54.051998 117.06405,85.055264 Z"},
     {id:"#path1012",d:"M 117.06405,85.055262 125.61668,90.667924 133.10022,66.079128 Z"},
     {id:"#path1014",d:"M 125.61668,90.667924 144.05827,54.051998 133.10022,66.079128 Z"},
     {id:"#path1016",d:"M 133.10022,95.478776 125.61668,90.667924 144.05827,54.051998 Z"},
     {id:"#path1018",d:"M 133.10022,95.478776 147.80005,88.797036 144.05827,54.051998 Z"},
     {id:"#path1020",d:"M 133.10022,95.478776 140.3165,101.3587 147.80005,88.797034 Z"},
     {id:"#path1022",d:"M 72.430041,95.746045 65.481032,101.3587 57.997486,89.866112 Z"},
     {id:"#path1024",d:"M 89.00075,85.055262 102.89877,113.11856 117.06405,85.055262 Z"},
     {id:"#path1026",d:"M 112.52047,76.769909 106.64054,85.055264 117.06405,85.055262 Z"},
     {id:"#path1028",d:"M 93.277062,77.304447 99.156992,85.055264 89.00075,85.055262 Z"},
     {id:"#path1030",d:"M 99.15699,85.055262 102.6315,77.304447 106.64054,85.055262 Z"},
     {id:"#path1032",d:"M 92.942975,77.137404 102.6315,77.304447 99.15699,85.055262 Z"},
     {id:"#path1034",d:"M 102.6315,77.304447 112.52047,76.769909 106.64054,85.055262 Z"},
     {id:"#path1036",d:"M 102.89877,113.11856 88.466212,120.60211 97.553377,102.69505 Z"},
     {id:"#path1038",d:"M 102.89877,113.11856 117.59859,120.60211 107.97689,102.16051 Z"},
     {id:"#path1040",d:"M 117.59859,120.60211 122.40944,112.04948 107.97689,102.16051 Z"},
     {id:"#path1042",d:"M 88.466212,120.60211 83.120822,112.31676 97.553377,102.69505 Z"},
     {id:"#path1044",d:"M 107.97689,102.16051 117.06405,85.055262 122.40944,112.04948 Z"},
     {id:"#path1046",d:"M 83.120822,112.31676 89.00075,85.055262 97.553377,102.69505 Z"},
     {id:"#path1048",d:"M 122.40944,112.04948 151.00728,109.37679 117.06405,85.055262 Z"},
     {id:"#path1050",d:"M 83.120822,112.31676 54.255714,109.37679 89.00075,85.055262 Z"},
     {id:"#path1052",d:"M 83.120822,112.31676 54.255714,109.37679 69.490076,120.33484 Z"},
     {id:"#path1054",d:"M 122.40944,112.04948 137.10927,120.60211 151.00728,109.37679 Z"},
     {id:"#path1056",d:"M 69.490076,120.33484 88.466212,120.60211 83.120822,112.31676 Z"},
     {id:"#path1058",d:"M 122.40944,112.04948 117.59859,120.60211 137.10927,120.52901 Z"},
     {id:"#path1060",d:"M 88.489836,120.34225 117.61926,120.51941 103.08185,113.10675 Z"},
     {id:"#path1062",d:"M 88.466212,120.60211 97.820645,162.02889 102.89877,162.29616 Z"},
     {id:"#path1064",d:"M 102.89877,162.29616 117.59859,120.60211 108.11052,162.42979 Z"},
     {id:"#path1066",d:"M 88.466212,120.60211 117.61926,120.51941 102.89877,162.29614 Z"},
     {id:"#path1068",d:"M 97.820643,162.02889 93.360117,167.92113 102.85378,168.33129 Z"},
     {id:"#path1070",d:"M 102.80952,167.92113 108.11052,162.42979 112.44792,168.11012 Z"},
     {id:"#path1072",d:"M 97.820643,162.02889 108.11052,162.42979 102.80952,167.92113 Z"},
     {id:"#path1074",d:"M 102.80952,167.92113 98.840773,175.66964 106.96726,175.85863 Z"},
     {id:"#path1076",d:"M 93.360117,167.92113 98.840773,175.66964 102.58591,168.32362 Z"},
     {id:"#path1078",d:"M 102.80952,167.92113 106.96726,175.85863 112.44792,168.11012 Z"},
     {id:"#path1080",d:"M 98.840773,175.66964 96.384072,172.10161 100.62698,172.3856 Z"},
     {id:"#path1082",d:"M 105.10374,172.31876 109.71414,172.00138 106.96726,175.85863 Z"},
     {id:"#path1084",d:"M 98.840773,175.66964 103.23285,177.73097 106.96726,175.85863 Z"},
     {id:"#path1086",d:"M 88.466212,120.60211 93.360117,167.92113 97.820643,162.02889 Z"},
     {id:"#path1088",d:"M 117.59859,120.60211 108.11052,162.42979 112.44792,168.11012 Z"},
     {id:"#path1090",d:"M 117.59859,120.60211 121.99181,170.09449 113.58184,178.50446 Z"},
     {id:"#path1092",d:"M 113.58184,178.50446 112.44792,168.11012 106.96726,175.85863 Z"},
     {id:"#path1094",d:"M 83.816218,170.28348 92.415176,178.69345 88.466212,120.60211 Z"},
     {id:"#path1096",d:"M 93.360117,167.92113 92.415174,178.69345 98.840773,175.66964 Z"},
     {id:"#path1098",d:"M 95.06101,177.37053 98.084821,181.62277 98.840773,175.66964 Z"},
     {id:"#path1100",d:"M 106.96726,175.85863 107.9122,182.00074 110.55803,177.55952 Z"},
     {id:"#path1102",d:"M 98.084819,181.62277 103.09301,183.04018 107.9122,182.00074 Z"},
     {id:"#path1104",d:"M 137.10927,120.60211 119.53497,143.91964 125.20461,120.57961 Z"},
     {id:"#path1106",d:"M 125.20461,120.57961 118.02306,125.77678 117.59859,120.60211 Z"},
     {id:"#path1108",d:"M 78.997023,120.57961 87.784968,126.06027 88.466212,120.60211 Z"},
     {id:"#path1110",d:"M 69.490076,120.33484 86.462051,143.73065 78.997023,120.57961 Z"},
     {id:"#path1112",d:"M 69.490076,120.33484 74.177826,168.11012 86.462049,143.73065 Z"},
     {id:"#path1114",d:"M 74.177826,168.11012 84.383183,165.84226 86.462049,143.73065 Z"},
     {id:"#path1116",d:"M 137.10927,120.60211 131.7247,168.3936 119.53497,143.91964 Z"},
     {id:"#path1118",d:"M 121.61384,165.93675 131.7247,168.3936 119.53497,143.91964 Z"},
     {id:"#path1120",d:"M 69.490076,120.33484 49.609374,134.09226 74.177826,168.11012 Z"},
     {id:"#path1122",d:"M 54.255714,109.37679 49.609374,134.09226 69.490076,120.33484 Z"},
     {id:"#path1124",d:"M 49.609374,134.09226 47.15253,146.84896 74.177826,168.11012 Z"},
     {id:"#path1126",d:"M 137.10927,120.60211 156.10416,133.90327 151.00728,109.37679 Z"},
     {id:"#path1128",d:"M 156.10416,133.90327 131.7247,168.3936 137.10927,120.60211 Z"},
     {id:"#path1130",d:"M 156.10416,133.90327 158.75,146.65997 131.7247,168.3936 Z"},
     {id:"#path1132",d:"M 88.466212,120.60211 92.415174,178.69345 93.360117,167.92113 Z"},
     {id:"#path1134",d:"M 113.58184,178.50446 112.44792,168.11012 117.59859,120.60211 Z"},
     {id:"#path1136",d:"M 65.481032,101.3587 89.00075,85.055262 79.913585,90.667924 Z"},
     {id:"#path1138",d:"M 117.06405,85.055262 125.61668,90.667924 140.3165,101.3587 Z"},
     {id:"#path1140",d:"M 57.997486,89.866112 66.149209,71.157247 72.430041,95.746045 Z"},
     {id:"#path1142",d:"M 133.10022,95.478776 147.80005,88.797034 139.64833,70.622709 Z"},
     {id:"#path1144",d:"M 62.941972,97.750565 54.255714,109.37679 65.481032,101.3587 Z"},
     {id:"#path1146",d:"M 142.72193,97.216028 151.00728,109.37679 140.3165,101.3587 Z"},
     {id:"#path1148",d:"M 60.665177,94.593747 60.287201,101.01934 62.941972,97.750563 Z"},
     {id:"#path1150",d:"M 144.95387,93.837796 145.52083,101.39732 142.72193,97.216028 Z"},
];

//bull outline
var bPaths = [

     {id:"#path1000",d:"M 4.7360721,66.302683 7.3634421,75.732363 11.940142,75.183053 Z"},
     {id:"#path1002",d:"M 7.3634421,75.732363 13.635212,81.408473 11.940142,75.183053 Z"},
     {id:"#path1004",d:"M 11.940142,75.183053 17.703392,77.014063 13.635212,81.408473 Z"},
     {id:"#path1006",d:"M 17.703392,77.014063 21.771572,81.866223 13.635212,81.408473 Z"},
     {id:"#path1008",d:"M 17.703392,77.014063 23.381892,73.626703 21.771572,81.866223 Z"},
     {id:"#path1010",d:"M 21.771572,81.866223 28.212852,78.845063 23.381892,73.626703 Z"},
     {id:"#path1012",d:"M 23.381892,73.626703 30.162192,72.253453 28.212852,78.845063 Z"},
     {id:"#path1014",d:"M 25.161722,87.176143 59.99549,99.535428 71.94577,72.711203 Z"},
     {id:"#path1016",d:"M 29.568912,85.711333 36.942482,86.077533 32.704802,92.760703 Z"},
     {id:"#path1018",d:"M 29.568912,85.711333 29.229892,89.556443 32.704802,92.760703 Z"},
     {id:"#path1020",d:"M 36.942482,86.077533 41.773452,93.767753 28.890882,97.887513 Z"},
     {id:"#path1022",d:"M 28.890882,97.887513 15.838812,100.90868 29.568912,104.29603 Z"},
     {id:"#path1024",d:"M 28.890882,97.887513 38.129042,100.08473 29.568912,104.29603 Z"},
     {id:"#path1026",d:"M 28.890882,97.887513 41.773452,93.767753 38.129042,100.08473 Z"},
     {id:"#path1028",d:"M 28.890882,97.887513 15.838812,100.90868 18.974702,96.788913 Z"},
     {id:"#path1030",d:"M 15.838812,100.90868 6.8549221,85.711333 18.974702,96.788913 Z"},
     {id:"#path1032",d:"M 59.99549,99.535428 25.161722,87.176143 29.568912,104.29603 Z"},
     {id:"#path1034",d:"M 71.94577,72.711203 78.38705,59.436413 94.744514,66.028033 Z"},
     {id:"#path1036",d:"M 59.99549,99.535428 96.778604,112.0778 94.744514,66.028033 Z"},
     {id:"#path1038",d:"M 114.66164,97.887513 124.91683,89.373343 94.744514,66.028033 Z"},
     {id:"#path1040",d:"M 124.91683,89.373343 138.47743,94.500153 134.40925,130.93715 Z"},
     {id:"#path1042",d:"M 138.47743,94.500153 164.92059,94.591703 134.40925,130.93715 Z"},
     {id:"#path1044",d:"M 164.92059,94.591703 182.97312,129.28925 188.56687,106.21859 Z"},
     {id:"#path1046",d:"M 164.92059,94.591703 167.37844,154.19091 182.97312,129.28925 Z"},
     {id:"#path1048",d:"M 182.97312,129.28925 193.65209,125.35259 187.63458,110.52145 Z"},
     {id:"#path1050",d:"M 188.56687,106.21859 193.39783,115.37361 187.63458,110.52145 Z"},
     {id:"#path1052",d:"M 193.65209,125.35259 197.97453,139.54287 193.39783,115.37361 Z"},
     {id:"#path1054",d:"M 197.97453,139.54287 202.04271,146.31759 193.39783,115.37361 Z"},
     {id:"#path1056",d:"M 202.04271,146.31759 213.82347,144.57813 201.19517,143.57108 Z"},
     {id:"#path1058",d:"M 213.82347,144.57813 218.14592,139.26822 212.46742,143.11333 Z"},
     {id:"#path1060",d:"M 212.46742,143.11333 201.19517,143.57108 213.82347,144.57813 Z"},
     {id:"#path1062",d:"M 212.46742,143.11333 218.9087,135.88086 218.14592,139.26822 Z"},
     {id:"#path1064",d:"M 218.9087,135.88086 222.80737,135.42311 218.14592,139.26822 Z"},
     {id:"#path1066",d:"M 218.14592,139.26822 221.45131,143.47953 222.80737,135.42311 Z"},
     {id:"#path1068",d:"M 222.80737,135.42311 227.80784,142.47248 221.45131,143.47953 Z"},
     {id:"#path1070",d:"M 227.80784,142.47248 231.45225,142.56403 225.77375,139.35977 Z"},
     {id:"#path1072",d:"M 134.40925,130.93715 141.78282,144.85278 167.37844,154.19091 Z"},
     {id:"#path1074",d:"M 134.40925,130.93715 118.72981,147.69084 141.78282,144.85278 Z"},
     {id:"#path1076",d:"M 96.778604,112.0778 134.40925,130.93715 114.66164,97.887513 Z"},
     {id:"#path1078",d:"M 59.99549,99.535428 46.519652,132.40195 29.568912,104.29603 Z"},
     {id:"#path1080",d:"M 59.99549,99.535428 55.927312,127.45824 46.519652,132.40195 Z"},
     {id:"#path1082",d:"M 46.519652,132.40195 52.367662,131.9442 55.927312,127.45824 Z"},
     {id:"#path1084",d:"M 59.99549,99.535428 65.58923,123.24693 96.778604,112.0778 Z"},
     {id:"#path1086",d:"M 65.58923,123.24693 72.6238,140.73302 96.778604,112.0778 Z"},
     {id:"#path1088",d:"M 72.6238,140.73302 70.67446,174.9728 79.40409,167.74034 Z"},
     {id:"#path1090",d:"M 72.6238,140.73302 97.626144,128.46529 96.778604,112.0778 Z"},
     {id:"#path1092",d:"M 72.6238,140.73302 79.40409,167.74034 97.626144,128.46529 Z"},
     {id:"#path1094",d:"M 79.40409,167.74034 78.38705,182.02217 70.67446,174.9728 Z"},
     {id:"#path1096",d:"M 70.67446,174.9728 62.96187,188.79689 78.38705,182.02217 Z"},
     {id:"#path1098",d:"M 62.96187,188.79689 73.21707,190.53634 78.38705,182.02217 Z"},
     {id:"#path1100",d:"M 98.727944,171.1277 88.557494,148.51479 89.659294,160.78252 Z"},
     {id:"#path1102",d:"M 89.023644,147.46196 98.473684,145.49364 97.626144,128.46529 Z"},
     {id:"#path1104",d:"M 98.473684,145.49364 98.727944,171.1277 88.557494,148.51479 Z"},
     {id:"#path1106",d:"M 98.727944,157.94447 107.11855,169.4798 98.727944,171.1277 Z"},
     {id:"#path1108",d:"M 98.727944,171.1277 98.855074,185.08911 107.11855,169.4798 Z"},
     {id:"#path1110",d:"M 107.11855,169.4798 107.71183,181.244 98.855074,185.08911 Z"},
     {id:"#path1112",d:"M 97.626144,128.46529 118.72981,147.69084 98.473684,145.49364 Z"},
     {id:"#path1114",d:"M 97.626144,128.46529 134.40925,130.93715 118.72981,147.69084 Z"},
     {id:"#path1116",d:"M 182.97312,129.28925 192.01739,163.41442 193.65209,125.35259 Z"},
     {id:"#path1118",d:"M 172.71995,146.84206 182.97312,129.28925 192.01739,163.41442 Z"},
     {id:"#path1120",d:"M 192.01739,163.41442 193.09612,181.02255 201.48631,173.12479 Z"},
     {id:"#path1122",d:"M 192.01739,163.41442 193.09612,146.97153 201.48631,173.12479 Z"},
     {id:"#path1124",d:"M 193.09612,146.97153 201.00687,155.25771 201.48631,173.12479 Z"},
     {id:"#path1126",d:"M 201.48631,173.12479 203.34414,179.46889 200.22779,182.12306 Z"},
     {id:"#path1128",d:"M 201.48631,173.12479 184.58608,190.1503 199.32884,190.02083 Z"},
     {id:"#path1130",d:"M 163.19109,177.20314 169.42381,186.78404 165.58829,187.17245 Z"},
     {id:"#path1132",d:"M 154.08175,190.92713 163.19109,177.20314 166.72696,191.63922 Z"},
     {id:"#path1134",d:"M 163.19109,177.20314 180.15126,161.66655 169.30395,181.21676 Z"},
     {id:"#path1136",d:"M 169.42381,186.78404 163.19109,177.20314 169.30395,181.21676 Z"},
     {id:"#path1138",d:"M 163.19109,177.20314 166.66703,165.16229 180.15126,161.66655 Z"},
     {id:"#path1140",d:"M 166.66703,165.16229 167.37844,154.19091 180.15126,161.66655 Z"},
     {id:"#path1142",d:"M 166.66703,165.16229 148.44833,155.7756 167.37844,154.19091 Z"},
     {id:"#path1144",d:"M 141.78282,144.85278 148.44833,155.7756 167.37844,154.19091 Z"},
     {id:"#path1146",d:"M 25.161722,87.176143 78.38705,59.436413 71.94577,72.711203 Z"},
     {id:"#path1148",d:"M 28.212852,78.845063 25.161722,87.176143 38.596782,80.164193 Z"},
     {id:"#path1150",d:"M 30.162192,72.253453 38.596782,80.164193 28.212852,78.845063 Z"},

];
//end bull paths

//boar paths
var baPaths = [
     {id:"#path1000",d:"M 54.529215,17.308059 66.463795,50.649108 64.569415,30.000388 Z"},
     {id:"#path1002",d:"M 54.529215,17.308059 48.656645,49.512488 68.168735,64.099198 Z"},
     {id:"#path1004",d:"M 54.529215,17.308059 66.463795,50.649108 68.168735,64.099198 Z"},
     {id:"#path1006",d:"M 64.569415,30.000388 79.724445,51.785738 71.957495,55.385058 Z"},
     {id:"#path1008",d:"M 64.569415,30.000388 68.737045,73.192208 71.957495,55.385058 Z"},
     {id:"#path1010",d:"M 71.957495,55.385058 106.05631,35.683528 85.407575,90.809928 Z"},
     {id:"#path1012",d:"M 71.957495,55.385058 67.221545,78.496468 85.407575,90.809928 Z"},
     {id:"#path1014",d:"M 67.221545,78.496468 75.177935,89.673298 81.239945,87.589488 Z"},
     {id:"#path1016",d:"M 106.05631,35.683528 125.5684,90.431048 105.67743,52.732928 Z"},
     {id:"#path1018",d:"M 106.05631,35.683528 85.407575,90.809928 105.67743,52.732928 Z"},
     {id:"#path1020",d:"M 106.05631,35.683528 138.82904,55.763928 125.5684,90.431048 Z"},
     {id:"#path1022",d:"M 131.63041,51.027988 147.1643,30.947578 138.82904,55.763928 Z"},
     {id:"#path1024",d:"M 147.1643,30.947578 142.23892,73.571088 138.82904,55.763928 Z"},
     {id:"#path1026",d:"M 147.1643,30.947578 157.01507,16.360869 145.08049,51.217428 Z"},
     {id:"#path1028",d:"M 156.63619,18.255249 162.12989,48.944168 143.94386,62.962568 Z"},
     {id:"#path1030",d:"M 138.82904,55.763928 143.94386,78.117598 125.5684,90.431048 Z"},
     {id:"#path1032",d:"M 130.30435,87.589488 137.50298,88.726108 143.94386,78.117598 Z"},
     {id:"#path1034",d:"M 75.177935,89.673298 59.833475,106.53327 85.407575,90.809928 Z"},
     {id:"#path1036",d:"M 125.5684,90.431048 150.95306,107.10158 137.50298,88.726108 Z"},
     {id:"#path1038",d:"M 105.67743,52.732928 98.099915,163.74349 85.407575,90.809928 Z"},
     {id:"#path1040",d:"M 105.67743,52.732928 125.5684,90.431048 113.44438,163.74349 Z"},
     {id:"#path1042",d:"M 105.67743,52.732928 98.099915,163.74349 105.23108,145.77956 Z"},
     {id:"#path1044",d:"M 105.67743,52.732928 105.23108,145.77956 113.44438,163.74349 Z"},
     {id:"#path1046",d:"M 87.817205,190.25188 105.23108,145.77956 106.5706,181.94681 Z"},
     {id:"#path1048",d:"M 105.23108,145.77956 105.0144,182.40311 123.20043,190.64366 Z"},
     {id:"#path1050",d:"M 89.575205,119.60448 72.904685,146.88352 93.932275,175.67807 Z"},
     {id:"#path1052",d:"M 121.02189,119.41504 138.63961,147.2624 117.23314,176.43582 Z"},
     {id:"#path1054",d:"M 117.23314,176.43582 138.63961,147.2624 120.64302,184.01333 Z"},
     {id:"#path1056",d:"M 130.87266,162.98574 146.97486,164.50124 122.91627,177.57245 Z"},
     {id:"#path1058",d:"M 133.90367,162.98574 156.82563,140.06376 146.97486,164.50124 Z"},
     {id:"#path1060",d:"M 90.522395,183.06614 72.904685,146.88352 93.932275,175.67807 Z"},
     {id:"#path1062",d:"M 87.491395,177.00413 63.622225,164.3118 80.103315,163.17517 Z"},
     {id:"#path1064",d:"M 63.622225,164.3118 54.339775,139.49545 77.261755,162.98574 Z"},
     {id:"#path1066",d:"M 99.425975,195.94792 106.5706,181.94681 111.92888,195.3796 Z"},
     {id:"#path1068",d:"M 111.92888,195.3796 117.23314,194.14826 108.61372,187.23378 Z"},
     {id:"#path1070",d:"M 117.23314,194.14826 123.20043,190.64366 108.61372,187.23378 Z"},
     {id:"#path1072",d:"M 99.425975,195.94792 94.405875,193.67466 103.78305,187.04434 Z"},
     {id:"#path1074",d:"M 94.405875,193.67466 87.817205,190.25188 103.78305,187.04434 Z"},
     {id:"#path1076",d:"M 94.405875,193.67466 97.626315,199.26308 105.86687,201.72577 Z"},
     {id:"#path1078",d:"M 117.23314,194.14826 113.63382,199.45252 105.86687,201.72577 Z"},
     {id:"#path1080",d:"M 59.833475,106.53327 76.967035,140.01959 85.407575,90.809928 Z"},
     {id:"#path1082",d:"M 125.5684,90.431048 134.56673,140.15355 150.95306,107.10158 Z"},
     {id:"#path1084",d:"M 54.529215,17.308059 67.553735,61.404968 65.946305,47.607838 Z"},
     {id:"#path1086",d:"M 156.63619,18.255249 145.08049,51.217428 143.94386,62.962568 Z"},
     {id:"#path1088",d:"M 105.23108,145.77956 102.78332,183.70385 108.94514,183.16804 Z"},
     {id:"#path1090",d:"M 106.5706,181.94681 123.20043,190.64366 106.48254,183.39766 Z"},
     {id:"#path1092",d:"M 106.48254,183.39766 87.817205,190.25188 105.0144,182.40311 Z"},
     {id:"#path1094",d:"M 121.02189,119.41504 113.44438,163.74349 117.23314,176.43582 Z"},
     {id:"#path1096",d:"M 89.575205,119.60448 93.932275,175.67807 98.094965,160.93188 Z"},
     {id:"#path1098",d:"M 85.407575,90.809928 104.2568,74.934198 105.67743,52.732928 Z"},
     {id:"#path1100",d:"M 107.47166,74.934198 125.5684,90.431048 105.67743,52.732928 Z"},
     {id:"#path1102",d:"M 71.957495,55.385058 99.994295,51.027988 106.05631,35.683528 Z"},
     {id:"#path1104",d:"M 111.36056,50.649108 138.82904,55.763928 106.05631,35.683528 Z"},
     {id:"#path1106",d:"M 134.42462,86.452858 136.65051,86.831728 138.68696,83.800728 Z"},
     {id:"#path1108",d:"M 73.245235,84.316478 75.588985,87.539138 77.200315,87.002028 Z"},
     {id:"#path1110",d:"M 68.850705,77.334058 81.155385,84.951248 68.391778,73.123155 Z"},
     {id:"#path1112",d:"M 130.56946,84.365308 143.06945,76.162188 142.23892,73.571088 Z"},
     {id:"#path1114",d:"M 68.657335,74.224938 69.485985,76.918018 77.012805,81.855328 Z"},
     {id:"#path1116",d:"M 69.071661,75.364318 69.969355,76.814438 72.524335,78.368138 Z"},
     {id:"#path1118",d:"M 135.22482,80.854058 142.0611,74.293988 143.06945,76.162188 Z"},
     {id:"#path1120",d:"M 138.2977,78.644348 141.99204,74.949988 142.47542,76.262008 Z"},
     {id:"#path1122",d:"M 141.92299,75.571478 141.05982,76.641798 142.47542,76.262008 Z"},
     {id:"#path1124",d:"M 72.354115,78.273998 73.025505,78.713458 72.488395,78.054278 Z"},
     {id:"#path1126",d:"M 104.31668,162.86909 102.78332,183.70385 105.0144,182.40311 Z"},
     {id:"#path1128",d:"M 104.68433,172.74836 102.737,183.66862 104.39758,181.53328 Z"},
     {id:"#path1130",d:"M 104.00696,179.77547 103.51867,182.02156 104.39758,181.53328 Z"},
     {id:"#path1132",d:"M 106.09124,161.61141 106.5706,181.94681 108.94514,183.16804 Z"},
     {id:"#path1134",d:"M 107.13196,171.67 106.5706,181.94681 108.94514,183.16804 Z"},
     {id:"#path1136",d:"M 105.76477,169.13093 105.0144,182.40311 108.30383,182.11922 Z"},
     {id:"#path1138",d:"M 107.13196,170.91041 104.20227,183.58406 108.30383,182.11922 Z"},
     {id:"#path1140",d:"M 105.86242,178.01766 105.0144,182.40311 108.30383,182.11922 Z"},
     {id:"#path1142",d:"M 106.15539,179.97078 105.0144,182.40311 108.30383,182.11922 Z"},
     {id:"#path1144",d:"M 106.35071,180.94734 105.0144,182.40311 107.81555,180.75203 Z"},
     {id:"#path1146",d:"M 105.15442,171.74324 103.71399,173.01277 105.03235,172.54891 Z"},
     {id:"#path1148",d:"M 76.467885,81.533278 77.957145,82.216868 76.882925,82.168048 Z"},
     {id:"#path1150",d:"M 70.901576,76.745386 69.347875,77.643078 76.467885,81.533278 Z"},
];
//end boar paths

//start stag paths
var sPaths = [
       {id:"#path1000",d:"M 56.260235,14.362474 34.745038,44.831201 36.615925,61.535545 Z"},
       {id:"#path1002",d:"M 69.222807,37.882192 39.489073,54.586539 36.615925,61.535545 Z"},
       {id:"#path1004",d:"M 69.222807,37.882192 36.883194,67.549108 36.615925,61.535545 Z"},
       {id:"#path1006",d:"M 41.025873,64.007788 40.290882,106.70409 53.320269,111.7154 Z"},
       {id:"#path1008",d:"M 40.290882,106.70409 36.883194,67.549108 41.025873,64.007788 Z"},
       {id:"#path1010",d:"M 40.290882,106.70409 33.074604,103.6305 16.83798,72.894499 Z"},
       {id:"#path1012",d:"M 40.290882,106.70409 16.83798,72.894499 39.689524,100.22281 Z"},
       {id:"#path1014",d:"M 74.969102,119.73348 23.118814,100.28963 82.719917,134.36649 Z"},
       {id:"#path1016",d:"M 70.158249,110.77996 84.457169,137.30646 97.553377,134.96785 Z"},
       {id:"#path1018",d:"M 70.158249,110.77996 71.494599,100.15599 97.553377,134.96785 Z"},
       {id:"#path1020",d:"M 70.158249,110.77996 63.810599,99.354184 73.499119,74.097212 Z"},
       {id:"#path1022",d:"M 92.408437,128.28611 98.622455,107.105 85.860336,119.3994 Z"},
       {id:"#path1024",d:"M 98.622455,107.105 98.488819,118.39714 92.408435,128.28611 Z"},
       {id:"#path1026",d:"M 98.488819,118.39714 99.357446,93.073348 103.83421,109.97815 Z"},
       {id:"#path1028",d:"M 97.553377,134.96785 84.457169,137.30646 86.127605,146.66089 Z"},
       {id:"#path1030",d:"M 84.457169,137.30646 81.584021,137.97463 86.127605,146.66089 Z"},
       {id:"#path1032",d:"M 84.72444,149.73449 73.632755,135.1683 61.939712,134.09922 Z"},
       {id:"#path1034",d:"M 84.72444,149.73449 82.38583,159.28937 76.773171,144.58955 Z"},
       {id:"#path1036",d:"M 76.773171,144.58955 63.476512,151.00402 78.978145,150.80357 Z"},
       {id:"#path1038",d:"M 76.773171,144.58955 46.103992,132.36197 63.476512,151.00402 Z"},
       {id:"#path1040",d:"M 76.773171,144.58955 61.939712,134.09922 46.103992,132.36197 Z"},
       {id:"#path1042",d:"M 86.127605,146.66089 82.385828,159.28937 97.018836,161.82843 Z"},
       {id:"#path1044",d:"M 86.127605,146.66089 97.553377,134.96785 107.37553,134.90105 Z"},
       {id:"#path1046",d:"M 86.127605,146.66089 97.018834,161.82843 107.37553,134.90105 Z"},
       {id:"#path1048",d:"M 157.99405,15.21875 177.8378,60.953869 179.16071,44.322915 Z"},
       {id:"#path1050",d:"M 144.76488,37.708332 175.19196,54.906248 177.8378,60.953869 Z"},
       {id:"#path1052",d:"M 144.76488,37.708332 177.64881,68.135414 177.8378,60.953869 Z"},
       {id:"#path1054",d:"M 177.64881,68.135412 172.54613,63.599702 161.01786,111.03571 Z"},
       {id:"#path1056",d:"M 174.24702,106.12202 161.01786,111.03571 177.64881,68.135412 Z"},
       {id:"#path1058",d:"M 174.24702,106.12202 174.05803,100.45238 197.30357,72.671129 Z"},
       {id:"#path1060",d:"M 174.24702,106.12202 181.42857,103.47619 197.30357,72.671127 Z"},
       {id:"#path1062",d:"M 139.47321,119.1622 129.83482,136.17113 191.82291,99.885414 Z"},
       {id:"#path1064",d:"M 143.63095,110.27976 140.98512,73.80506 150.43452,100.45238 Z"},
       {id:"#path1066",d:"M 142.875,101.20833 116.60565,135.0372 143.63095,110.27976 Z"},
       {id:"#path1068",d:"M 143.63095,110.27976 116.60565,135.0372 129.83482,136.17113 Z"},
       {id:"#path1070",d:"M 116.60565,135.0372 128.5119,146.37649 129.83482,136.17113 Z"},
       {id:"#path1072",d:"M 107.37553,134.90105 116.60565,135.0372 128.5119,146.37649 Z"},
       {id:"#path1074",d:"M 107.37553,134.90105 117.46495,161.62798 128.5119,146.37649 Z"},
       {id:"#path1076",d:"M 97.018834,161.82843 107.44235,141.04823 107.37555,134.90105 Z"},
       {id:"#path1078",d:"M 117.46495,161.62798 107.44235,141.04823 107.37555,134.90105 Z"},
       {id:"#path1080",d:"M 117.46495,161.62798 132.29841,159.22256 128.5119,146.37649 Z"},
       {id:"#path1082",d:"M 102.76513,191.6958 107.44235,141.04823 100.76061,154.54534 Z"},
       {id:"#path1084",d:"M 111.45139,191.56217 107.44235,141.04823 113.58955,153.74353 Z"},
       {id:"#path1086",d:"M 117.46495,161.62798 111.45139,191.56217 113.58955,153.74353 Z"},
       {id:"#path1088",d:"M 102.76513,191.6958 100.76061,154.54534 97.018834,161.82843 Z"},
       {id:"#path1090",d:"M 117.46495,161.62798 124.81487,164.30068 121.20673,186.08314 Z"},
       {id:"#path1092",d:"M 97.018834,161.82843 89.268021,164.56795 93.143429,186.88495 Z"},
       {id:"#path1094",d:"M 124.81487,164.30068 132.29841,159.22256 121.20673,186.08314 Z"},
       {id:"#path1096",d:"M 89.268021,164.56795 82.385828,159.28937 93.143429,186.88495 Z"},
       {id:"#path1098",d:"M 99.825168,191.82944 91.940718,191.56217 97.018834,161.82843 Z"},
       {id:"#path1100",d:"M 121.8749,192.23034 114.39136,191.82944 117.46495,161.62798 Z"},
       {id:"#path1102",d:"M 99.825166,191.82944 102.76513,191.6958 107.17508,200.9166 Z"},
       {id:"#path1104",d:"M 99.825166,191.82944 97.018836,194.50213 107.17508,200.9166 Z"},
       {id:"#path1106",d:"M 111.45139,191.56217 114.39136,191.82944 107.17508,200.9166 Z"},
       {id:"#path1108",d:"M 114.39136,191.82944 116.93042,194.7694 107.17508,200.9166 Z"},
       {id:"#path1110",d:"M 100.62698,197.04119 98.355186,198.37754 104.60491,199.48214 Z"},
       {id:"#path1112",d:"M 98.355186,198.37754 100.58891,200.66332 104.60491,199.48214 Z"},
       {id:"#path1114",d:"M 113.5346,196.97805 115.75521,198.5372 109.6131,199.52939 Z"},
       {id:"#path1116",d:"M 115.75521,198.5372 113.62909,200.80506 109.6131,199.52939 Z"},
       {id:"#path1118",d:"M 104.60491,199.48214 107.2035,203.97061 109.6131,199.52939 Z"},
       {id:"#path1120",d:"M 91.940718,191.56217 98.462797,204.72656 100.58891,200.66332 Z"},
       {id:"#path1122",d:"M 98.462794,204.72656 107.2035,203.97061 100.58891,200.66332 Z"},
       {id:"#path1124",d:"M 116.13318,204.58482 121.8749,192.23034 113.62909,200.80506 Z"},
       {id:"#path1126",d:"M 116.13318,204.58482 107.2035,203.97061 113.62909,200.80506 Z"},
       {id:"#path1128",d:"M 128.48982,119.53303 115.3268,106.90455 121.60763,128.41974 Z"},
       {id:"#path1130",d:"M 115.3268,106.90455 115.66089,118.53077 121.60763,128.41974 Z"},
       {id:"#path1132",d:"M 114.45817,93.140166 110.3155,110.1786 115.66089,118.53077 Z"},
       {id:"#path1134",d:"M 129.49208,149.66767 137.71062,144.45592 132.29841,159.22256 Z"},
       {id:"#path1136",d:"M 129.49208,149.66767 140.70164,134.94271 153.26934,133.90327 Z"},
       {id:"#path1138",d:"M 137.71062,144.45592 151.75744,151.00669 135.31547,150.62872 Z"},
       {id:"#path1140",d:"M 137.71062,144.45592 151.75744,151.00669 168.1994,132.29687 Z"},
       {id:"#path1142",d:"M 137.71062,144.45592 153.26934,133.90327 168.1994,132.29687 Z"},
       {id:"#path1144",d:"M 100.92766,204.55815 101.19492,206.96358 107.14167,209.7365 Z"},
       {id:"#path1146",d:"M 107.14167,209.7365 113.08842,206.76312 113.45591,204.42452 Z"},
       {id:"#path1148",d:"M 102.76513,191.6958 111.45139,191.56217 107.17508,200.9166 Z"},
       {id:"#path1150",d:"M 129.83482,136.17113 132.60232,137.662 128.5119,146.37649 Z"},
];
//end stag paths

//circle paths 
var cPaths = [
       {id:"#path1000",d:"M 39.02135,29.463203 105.97237,49.508417 82.586284,29.864108 Z"},
       {id:"#path1002",d:"M 105.97237,49.508417 173.72519,30.131377 129.62572,29.463203 Z"},
       {id:"#path1004",d:"M 82.586284,29.864108 129.62572,29.463203 105.97237,49.508417 Z"},
       {id:"#path1006",d:"M 39.02135,29.463203 35.012307,76.50264 48.910324,74.631753 Z"},
       {id:"#path1008",d:"M 173.72519,30.131377 163.56895,74.097212 177.46696,76.502639 Z"},
       {id:"#path1010",d:"M 105.97237,49.508417 170.25069,44.964834 173.72519,30.131377 Z"},
       {id:"#path1012",d:"M 105.97237,49.508417 42.909264,47.053383 39.02135,29.463203 Z"},
       {id:"#path1014",d:"M 49.323735,74.582144 61.215886,47.857878 42.909264,47.053383 Z"},
       {id:"#path1016",d:"M 163.56895,74.09721 147.80005,46.568452 170.25069,44.964834 Z"},
       {id:"#path1018",d:"M 105.97237,49.508417 93.009796,99.755088 91.543843,49.040023 Z"},
       {id:"#path1020",d:"M 119.0625,99.755086 105.97237,49.508417 120.5744,48.480654 Z"},
       {id:"#path1022",d:"M 105.97237,49.508417 111.50297,129.17857 119.0625,99.755086 Z"},
       {id:"#path1024",d:"M 100.71176,128.93304 93.009796,99.755086 105.97237,49.508417 Z"},
       {id:"#path1026",d:"M 93.009796,99.755086 91.980513,129.19762 99.218749,123.8869 Z"},
       {id:"#path1028",d:"M 112.92137,123.80935 120.53856,129.28837 119.0625,99.755086 Z"},
       {id:"#path1030",d:"M 100.71176,128.93304 106.37327,185.81588 111.50297,129.17857 Z"},
       {id:"#path1032",d:"M 91.980511,129.19762 106.37327,185.81588 99.218749,123.8869 Z"},
       {id:"#path1034",d:"M 112.92137,123.80935 106.37327,185.81588 120.53856,129.28837 Z"},
       {id:"#path1036",d:"M 105.9765,49.657245 97.899963,29.730673 82.590418,30.012936 Z"},
       {id:"#path1038",d:"M 105.97237,49.508417 114.43229,29.572397 129.62572,29.463203 Z"},
       {id:"#path1040",d:"M 105.97237,49.508417 92.074999,62.579167 93.009796,99.755086 Z"},
       {id:"#path1042",d:"M 105.9765,49.657245 92.074999,65.621875 93.009796,99.755086 Z"},
       {id:"#path1044",d:"M 105.9765,49.657245 92.339582,70.384375 93.009796,99.755086 Z"},
       {id:"#path1046",d:"M 105.9765,49.657245 92.604166,77.263542 93.009796,99.755086 Z"},
       {id:"#path1048",d:"M 105.9765,49.657245 92.868749,87.185417 93.009796,99.755086 Z"},
       {id:"#path1050",d:"M 105.97237,49.508417 119.98854,62.579167 119.0625,99.755086 Z"},
       {id:"#path1052",d:"M 105.97237,49.508417 119.98854,65.621875 119.0625,99.755086 Z"},
       {id:"#path1054",d:"M 105.9765,49.657245 119.85625,70.384375 119.0625,99.755086 Z"},
       {id:"#path1056",d:"M 105.9765,49.657245 119.59167,77.263542 119.0625,99.755086 Z"},
       {id:"#path1058",d:"M 105.9765,49.657245 119.45937,87.185417 119.0625,99.755086 Z"},
       {id:"#path1060",d:"M 105.97237,49.508417 92.086371,60.086245 93.009796,99.755086 Z"},
       {id:"#path1062",d:"M 105.97237,49.508417 120.20447,60.239288 119.0625,99.755086 Z"},
       {id:"#path1064",d:"M 105.97237,49.508417 91.810416,58.081251 93.009796,99.755086 Z"},
       {id:"#path1066",d:"M 105.97237,49.508417 92.008853,56.03073 93.009796,99.755086 Z"},
       {id:"#path1068",d:"M 105.97237,49.508417 91.843488,54.67474 93.009796,99.755086 Z"},
       {id:"#path1070",d:"M 105.97237,49.508417 91.595953,53.518284 93.009796,99.755086 Z"},
       {id:"#path1072",d:"M 105.97237,49.508417 91.678124,52.425782 93.009796,99.755086 Z"},
       {id:"#path1074",d:"M 105.97237,49.508417 91.428239,51.383299 93.009796,99.755086 Z"},
       {id:"#path1076",d:"M 105.97237,49.508417 91.439586,50.348639 93.009796,99.755086 Z"},
       {id:"#path1078",d:"M 105.97237,49.508417 91.29927,49.317989 93.009796,99.755086 Z"},
       {id:"#path1080",d:"M 105.97237,49.508417 91.202699,49.122623 93.009796,99.755086 Z"},
       {id:"#path1082",d:"M 105.97237,49.508417 120.20447,58.08777 119.0625,99.755086 Z"},
       {id:"#path1084",d:"M 105.97237,49.508417 120.29801,56.029793 119.0625,99.755086 Z"},
       {id:"#path1086",d:"M 105.97237,49.508417 120.31927,54.641667 119.0625,99.755086 Z"},
       {id:"#path1088",d:"M 105.97237,49.508417 120.41849,53.417969 119.0625,99.755086 Z"},
       {id:"#path1090",d:"M 105.97237,49.508417 120.45156,52.392709 119.0625,99.755086 Z"},
       {id:"#path1092",d:"M 105.97237,49.508417 120.43833,51.352576 119.0625,99.755086 Z"},
       {id:"#path1094",d:"M 105.97237,49.508417 120.4851,50.276818 119.0625,99.755086 Z"},
       {id:"#path1096",d:"M 105.97237,49.508417 120.5411,49.359201 119.0625,99.755086 Z"},
       {id:"#path1098",d:"M 105.97237,49.508417 120.5744,48.480654 119.0625,99.755086 Z"},
       {id:"#path1100",d:"M 105.97237,49.508417 91.980511,129.19762 93.009796,99.755086 Z"},
       {id:"#path1102",d:"M 105.9765,49.657245 94.853955,140.59387 91.980511,129.19762 Z"},
       {id:"#path1104",d:"M 105.97237,49.508417 98.22155,153.50299 94.853955,140.59387 Z"},
       {id:"#path1106",d:"M 105.97237,49.508417 120.53856,129.28837 119.0625,99.755086 Z"},
       {id:"#path1108",d:"M 117.67877,140.59387 105.97237,49.508417 120.53856,129.28837 Z"},
       {id:"#path1110",d:"M 114.31117,153.69008 105.97237,49.508417 117.67877,140.59387 Z"},
       {id:"#path1112",d:"M 105.97237,49.508417 102.89877,172.39894 98.22155,153.50299 Z"},
       {id:"#path1114",d:"M 109.82105,172.21185 105.97237,49.508417 114.31117,153.69008 Z"},
       {id:"#path1116",d:"M 105.9765,49.657245 39.02135,29.463203 42.364743,44.424487 Z"},
       {id:"#path1118",d:"M 105.9765,49.657245 39.02135,29.463203 41.901722,42.572403 Z"},
       {id:"#path1120",d:"M 105.97237,49.508417 39.02135,29.463203 41.446382,40.552605 Z"},
       {id:"#path1122",d:"M 105.97237,49.508417 39.02135,29.463203 41.02979,38.71187 Z"},
       {id:"#path1124",d:"M 105.97237,49.508417 39.02135,29.463203 40.699061,36.859787 Z"},
       {id:"#path1126",d:"M 105.97237,49.508417 39.02135,29.463203 40.302186,35.019053 Z"},
       {id:"#path1128",d:"M 105.9765,49.657245 39.02135,29.463203 39.924685,33.139571 Z"},
       {id:"#path1130",d:"M 105.9765,49.657245 39.477714,31.272815 42.909264,47.053383 Z"},
       {id:"#path1132",d:"M 105.97237,49.508417 170.62485,43.320087 170.25069,44.964834 Z"},
       {id:"#path1134",d:"M 105.97237,49.508417 170.91587,41.648611 170.25069,44.964834 Z"},
       {id:"#path1136",d:"M 105.97237,49.508417 171.41099,39.827822 170.25069,44.964834 Z"},
       {id:"#path1138",d:"M 105.97237,49.508417 171.8343,38.249891 170.25069,44.964834 Z"},
       {id:"#path1140",d:"M 105.9765,49.657245 172.24155,36.567065 170.25069,44.964834 Z"},
       {id:"#path1142",d:"M 105.9765,49.657245 172.47527,35.029428 170.25069,44.964834 Z"},
       {id:"#path1144",d:"M 105.97237,49.508417 172.93828,33.342709 170.25069,44.964834 Z"},
       {id:"#path1146",d:"M 105.9765,49.657245 173.31261,31.739964 170.25069,44.964834 Z"},
       {id:"#path1148",d:"M 105.9765,49.657245 42.656215,45.78669 39.02135,29.463203 Z"},
       {id:"#path1150",d:"M 97.899962,29.730673 114.43229,29.572397 105.97237,49.508417 Z"},
];
//end cPaths: circle paths


//start i paths: implode paths
var iPaths = [
       {id:"#path1000",d:"M 100.17566,99.198226 100.11577,99.856978 99.660628,99.317999 Z"},
       {id:"#path1002",d:"M 100.60684,100.65946 100.66673,101.33018 101.33746,101.1625 Z"},
       {id:"#path1004",d:"M 102.8945,101.55775 102.41541,102.34825 103.25382,102.13266 Z"},
       {id:"#path1006",d:"M 100.85836,99.449749 100.4152,100.372 101.02605,99.892909 Z"},
       {id:"#path1008",d:"M 101.55305,99.53359 101.28955,100.14443 102.00818,100.12048 Z"},
       {id:"#path1010",d:"M 102.39146,103.10282 101.60095,103.97717 102.09202,104.1688 Z"},
       {id:"#path1012",d:"M 98.738379,100.51573 98.870129,101.09064 99.109675,100.899 Z"},
       {id:"#path1014",d:"M 101.78062,100.69539 101.54107,101.70148 102.05609,101.66555 Z"},
       {id:"#path1016",d:"M 99.468998,102.31232 98.534764,103.4861 99.361198,102.99503 Z"},
       {id:"#path1018",d:"M 99.301308,99.66534 99.049789,100.32409 99.504928,100.41991 Z"},
       {id:"#path1020",d:"M 98.77431,103.59389 98.82222,104.33649 99.349218,103.9053 Z"},
       {id:"#path1022",d:"M 100.96616,101.85719 100.43916,102.71955 101.21768,102.38419 Z"},
       {id:"#path1024",d:"M 102.95439,102.67164 102.31959,101.66555 102.25971,102.87526 Z"},
       {id:"#path1026",d:"M 101.22966,104.1688 100.35532,103.41423 100.03193,104.32451 Z"},
       {id:"#path1028",d:"M 98.594651,102.99503 99.253408,103.31842 98.930015,102.39616 Z"},
       {id:"#path1030",d:"M 101.19373,99.71325 101.96027,100.4798 101.55305,99.53359 Z"},
       {id:"#path1032",d:"M 102.05609,100.92296 102.70287,101.13855 101.96027,100.4798 Z"},
       {id:"#path1034",d:"M 99.301308,99.66534 98.414992,100.04861 98.738378,100.51573 Z"},
       {id:"#path1036",d:"M 98.403015,101.52182 97.672399,101.80928 98.486856,101.70148 Z"},
       {id:"#path1038",d:"M 101.56502,103.4861 102.4753,103.71367 101.64886,103.04294 Z"},
       {id:"#path1040",d:"M 102.96637,102.93514 101.00209,102.6956 102.7388,103.39028 Z"},
       {id:"#path1042",d:"M 100.95418,100.43189 99.732498,99.928841 100.4152,99.653363 Z"},
       {id:"#path1044",d:"M 101.50514,100.53968 100.95418,100.43189 101.33746,101.1625 Z"},
       {id:"#path1046",d:"M 99.744468,102.3243 98.307196,102.33628 99.732498,102.56385 Z"},
       {id:"#path1048",d:"M 100.03193,104.32451 99.660628,104.56405 100.61882,104.70778 Z"},
       {id:"#path1050",d:"M 100.42718,99.246135 101.28955,100.14443 100.85836,99.449749 Z"},
       {id:"#path1052",d:"M 101.33746,101.1625 99.888198,101.80928 102.09202,101.25832 Z"},
       {id:"#path1054",d:"M 102.70287,101.13855 103.25382,102.13266 102.09202,101.25832 Z"},
       {id:"#path1056",d:"M 102.95439,102.67164 103.25382,102.13266 101.58898,102.67164 Z"},
       {id:"#path1058",d:"M 99.888198,101.41403 100.27147,101.03075 98.870129,101.09064 Z"},
       {id:"#path1060",d:"M 99.349218,103.9053 99.660628,104.56405 98.822219,104.33649 Z"},
       {id:"#path1062",d:"M 99.205493,104.50417 99.720518,102.81537 98.977925,103.98915 Z"},
       {id:"#path1064",d:"M 101.60095,103.97717 100.35532,103.41423 102.39146,103.10282 Z"},
       {id:"#path1066",d:"M 98.702447,100.07257 97.911945,101.18646 99.13363,100.06059 Z"},
       {id:"#path1068",d:"M 101.50514,100.27618 100.4152,100.372 101.54107,100.92296 Z"},
       {id:"#path1070",d:"M 99.049789,101.73741 99.744468,102.3243 100.27147,101.03075 Z"},
       {id:"#path1072",d:"M 98.1994,101.2703 97.816127,102.15662 98.810243,101.94103 Z"},
       {id:"#path1074",d:"M 97.816127,102.15662 97.660422,102.40814 98.307196,102.80339 Z"},
       {id:"#path1076",d:"M 100.05588,102.8513 100.90627,103.03096 100.54695,102.20453 Z"},
       {id:"#path1078",d:"M 99.995998,103.29446 99.768428,103.91728 101.21768,103.61785 Z"},
       {id:"#path1080",d:"M 101.75666,101.5338 100.99011,102.19255 101.96027,101.98894 Z"},
       {id:"#path1082",d:"M 99.504928,100.41991 99.085721,100.61155 100.03193,100.94691 Z"},
       {id:"#path1084",d:"M 99.660628,99.317999 100.05588,100.57561 100.4152,99.653363 Z"},
       {id:"#path1086",d:"M 99.564808,99.66534 99.421088,100.06059 100.60684,100.65946 Z"},
       {id:"#path1088",d:"M 98.642561,100.80318 97.911945,101.18646 99.504928,101.66555 Z"},
       {id:"#path1090",d:"M 101.54107,101.70148 101.48216,102.32943 102.19357,101.80858 Z"},
       {id:"#path1092",d:"M 101.21768,103.61785 100.84639,104.57603 101.92434,103.89333 Z"},
       {id:"#path1094",d:"M 98.115559,101.92905 98.486856,102.08475 98.618605,103.91728 Z"},
       {id:"#path1096",d:"M 99.504928,101.66555 100.35532,103.41423 99.636678,101.12657 Z"},
       {id:"#path1098",d:"M 100.27147,101.03075 101.50514,100.27618 100.03193,100.94691 Z"},
       {id:"#path1100",d:"M 98.810243,101.94103 99.995998,103.29446 99.049789,101.73741 Z"},
       {id:"#path1102",d:"M 101.48216,102.32943 100.90627,103.03096 102.104,102.31232 Z"},
       {id:"#path1104",d:"M 99.768428,103.91728 98.77431,103.59389 99.995998,103.29446 Z"},
       {id:"#path1106",d:"M 101.56502,103.4861 101.00209,102.6956 100.35532,103.41423 Z"},
       {id:"#path1108",d:"M 100.84639,104.57603 99.872998,104.07833 100.00851,104.4171 Z"},
       {id:"#path1110",d:"M 98.043696,103.06689 98.630584,102.64769 97.648445,102.87526 Z"},
       {id:"#path1112",d:"M 98.977925,103.41423 98.043696,103.06689 99.872998,104.07833 Z"},
       {id:"#path1114",d:"M 102.25971,100.24025 102.75078,100.87505 102.4753,100.09652 Z"},
       {id:"#path1116",d:"M 101.78062,99.868955 103.07416,100.97087 101.50514,100.53968 Z"},
       {id:"#path1118",d:"M 98.546742,101.03075 99.504928,100.41991 98.103582,100.65946 Z"},
       {id:"#path1120",d:"M 100.27147,101.03075 99.504928,101.66555 101.27757,101.77334 Z"},
       {id:"#path1122",d:"M 99.109675,100.899 98.486856,102.08475 100.66673,101.33018 Z"},
       {id:"#path1124",d:"M 100.83441,101.06668 99.504928,100.41991 101.14582,99.40184 Z"},
       {id:"#path1126",d:"M 102.70287,101.13855 100.54695,102.20453 103.0023,102.37221 Z"},
       {id:"#path1128",d:"M 98.546742,101.03075 97.852059,101.48589 99.576788,101.97696 Z"},
       {id:"#path1130",d:"M 100.59486,104.04903 102.09202,104.1688 100.90627,103.03096 Z"},
       {id:"#path1132",d:"M 100.48707,101.65357 100.43916,102.71955 101.33746,101.1625 Z"},
       {id:"#path1134",d:"M 102.54716,101.78532 102.13993,99.880932 101.54107,100.92296 Z"},
       {id:"#path1136",d:"M 99.995998,103.29446 97.816127,102.15662 100.1517,101.91707 Z"},
       {id:"#path1138",d:"M 100.31938,104.13287 100.07984,103.68971 100.84639,103.95321 Z"},
       {id:"#path1140",d:"M 101.21768,102.38419 100.1517,101.91707 101.6848,102.13266 Z"},
       {id:"#path1142",d:"M 99.421088,100.06059 98.870129,101.09064 100.11577,99.856978 Z"},
       {id:"#path1144",d:"M 102.09202,101.25832 102.41541,100.61155 101.54107,100.92296 Z"},
       {id:"#path1146",d:"M 102.631,103.07887 102.41541,102.34825 102.25971,102.87526 Z"},
       {id:"#path1148",d:"M 101.8405,103.3783 102.104,102.31232 101.64886,103.04294 Z"},
       {id:"#path1150",d:"M 102.39146,102.02487 102.104,102.31232 102.69089,102.50396 Z"},
];
//end i paths: implode paths

//start ePaths: explode paths
var ePaths = [
       {id:"#path1000",d:"M 87.491118,-42.886482 84.279952,-10.485312 59.876178,-36.995362 Z"},
       {id:"#path1002",d:"M 345.30308,108.54779 348.51426,141.53762 384.4774,133.29015 Z"},
       {id:"#path1004",d:"M 316.07817,122.12813 290.39036,161.00941 335.34414,150.40547 Z"},
       {id:"#path1006",d:"M 190.24029,-63.886326 166.47898,-18.524776 199.23148,-42.089196 Z"},
       {id:"#path1008",d:"M 291.71545,-62.489607 277.58713,-32.445027 316.11857,-33.623027 Z"},
       {id:"#path1010",d:"M 328.49374,299.3224 286.10824,342.32789 312.43838,351.75334 Z"},
       {id:"#path1012",d:"M -26.64699,70.34204 -19.58284,98.619378 -6.73888,89.19344 Z"},
       {id:"#path1014",d:"M 275.71226,83.100742 262.86809,132.58597 290.48238,130.81872 Z"},
       {id:"#path1016",d:"M -86.878248,169.43412 -136.96992,227.16729 -92.658261,203.01368 Z"},
       {id:"#path1018",d:"M 22.815093,-51.473682 9.329173,-19.072612 33.732768,-14.359642 Z"},
       {id:"#path1020",d:"M -136.97716,265.73092 -134.40833,302.25622 -106.15179,281.04784 Z"},
       {id:"#path1022",d:"M 250.1451,314.63929 221.88845,357.05506 263.63107,340.56015 Z"},
       {id:"#path1024",d:"M 382.02639,238.45046 347.98974,188.96523 344.7791,248.46565 Z"},
       {id:"#path1026",d:"M 10.276098,355.95949 -36.604172,318.84546 -53.943674,363.6182 Z"},
       {id:"#path1028",d:"M -150.38986,201.50178 -115.06868,217.40794 -132.40834,172.04594 Z"},
       {id:"#path1030",d:"M 199.23148,-42.089196 240.33175,-4.385916 218.49747,-50.925896 Z"},
       {id:"#path1032",d:"M 333.41767,90.316308 368.09667,100.92025 328.28,68.519178 Z"},
       {id:"#path1034",d:"M -0.766307,-42.902361 -48.288727,-24.050971 -30.949437,-1.0753509 Z"},
       {id:"#path1036",d:"M -110.07095,115.68913 -149.24507,129.82804 -105.57559,124.52583 Z"},
       {id:"#path1038",d:"M 263.63107,340.56015 312.43838,351.75334 268.12639,318.76303 Z"},
       {id:"#path1040",d:"M 337.48718,283.11347 232.16661,271.33154 325.28537,305.49986 Z"},
       {id:"#path1042",d:"M 167.59281,-27.652328 102.08878,-52.395138 138.69383,-65.944718 Z"},
       {id:"#path1044",d:"M 408.58709,41.424185 379.04577,36.122465 399.59644,72.058003 Z"},
       {id:"#path1046",d:"M -55.344813,171.45671 -132.40834,172.04594 -55.986625,183.23913 Z"},
       {id:"#path1048",d:"M 71.26223,325.81439 51.353792,337.59633 102.73005,344.66578 Z"},
       {id:"#path1050",d:"M 218.49747,-50.925896 264.73594,-6.7426456 241.61644,-40.911006 Z"},
       {id:"#path1052",d:"M 344.01948,128.57717 266.31308,160.38949 384.4774,133.29015 Z"},
       {id:"#path1054",d:"M 400.84918,95.02928 430.38995,143.92526 368.09667,100.92025 Z"},
       {id:"#path1056",d:"M 410.6976,283.11347 426.7524,256.60337 337.48718,283.11347 Z"},
       {id:"#path1058",d:"M -71.586888,-34.497409 -51.036638,-53.349285 -126.17363,-50.403567 Z"},
       {id:"#path1060",d:"M -36.604172,318.84546 -19.907025,351.24653 -64.860752,340.05384 Z"},
       {id:"#path1062",d:"M -86.643756,377.78343 -59.029181,294.71865 -98.845466,352.45182 Z"},
       {id:"#path1064",d:"M 368.62432,347.07151 301.83625,319.38293 411.00982,304.06602 Z"},
       {id:"#path1066",d:"M -103.05444,33.839719 -145.43951,88.627147 -79.9353,33.250469 Z"},
       {id:"#path1068",d:"M 288.39066,19.392336 229.95036,24.105306 290.31715,51.204646 Z"},
       {id:"#path1070",d:"M -163.43501,73.28777 -126.18777,102.15436 -97.931032,38.530222 Z"},
       {id:"#path1072",d:"M -94.705754,105.12205 -115.25604,148.7163 -61.953624,138.11236 Z"},
       {id:"#path1074",d:"M -39.476845,151.66202 -47.825425,164.0332 -13.146755,183.47384 Z"},
       {id:"#path1076",d:"M 250.1451,314.63929 295.74125,323.47599 276.47525,282.82746 Z"},
       {id:"#path1078",d:"M -53.943674,363.6182 -66.145492,394.25202 11.560368,379.52436 Z"},
       {id:"#path1080",d:"M 301.12068,208.24922 260.01988,240.6503 312.03782,230.63559 Z"},
       {id:"#path1082",d:"M -122.96249,79.201197 -145.43951,88.627147 -94.705754,105.12205 Z"},
       {id:"#path1084",d:"M 79.765077,-72.712662 100.95766,-10.856212 120.22366,-56.217562 Z"},
       {id:"#path1086",d:"M -101.1611,-16.699873 -108.86706,2.7407672 -45.28952,32.196597 Z"},
       {id:"#path1088",d:"M -126.18777,102.15436 -165.36187,121.00624 -79.949445,144.57061 Z"},
       {id:"#path1090",d:"M 292.58501,238.4193 289.42638,269.30545 327.57069,243.68708 Z"},
       {id:"#path1092",d:"M 225.74145,327.01048 205.83365,374.13921 263.63107,340.56015 Z"},
       {id:"#path1094",d:"M -118.41955,134.54102 -98.511379,142.19924 -91.447259,232.33347 Z"},
       {id:"#path1096",d:"M -58.461689,113.73456 -12.865447,199.74459 -51.397528,87.22447 Z"},
       {id:"#path1098",d:"M 72.71982,-32.871622 138.86662,-69.985661 59.876178,-36.995362 Z"},
       {id:"#path1100",d:"M -118.41955,134.54102 -54.841854,201.1104 -105.57559,124.52583 Z"},
       {id:"#path1102",d:"M 252.38471,363.04355 221.5067,397.54878 285.72647,362.20198 Z"},
       {id:"#path1104",d:"M -83.674624,281.63708 -136.97716,265.73092 -71.472806,251.00326 Z"},
       {id:"#path1106",d:"M 167.59163,348.20075 137.4085,309.31947 102.73005,344.66578 Z"},
       {id:"#path1108",d:"M 32.284217,375.72625 -19.907025,351.24653 -12.64115,367.90918 Z"},
       {id:"#path1110",d:"M -115.77739,236.59274 -84.30967,215.9741 -136.96992,227.16729 Z"},
       {id:"#path1112",d:"M -45.928799,271.25732 -96.020209,254.17316 2.0631461,303.92152 Z"},
       {id:"#path1114",d:"M 260.20725,74.41015 286.53739,105.63322 271.76674,67.34069 Z"},
       {id:"#path1116",d:"M 284.26251,-15.000409 353.61941,39.198031 269.49185,17.989661 Z"},
       {id:"#path1118",d:"M -96.665445,62.241187 -45.28952,32.196597 -120.42677,43.979027 Z"},
       {id:"#path1120",d:"M -174.30963,26.978685 -215.41001,58.201743 -120.36466,63.503473 Z"},
       {id:"#path1122",d:"M -112.31049,266.58604 -145.70475,324.90797 -28.824451,287.79393 Z"},
       {id:"#path1124",d:"M -26.64699,70.34204 -97.931032,38.530222 -9.94984,-11.544238 Z"},
       {id:"#path1126",d:"M 401.74735,116.99311 286.15142,169.42406 417.80215,177.67152 Z"},
       {id:"#path1128",d:"M -94.705754,105.12205 -131.9532,127.50842 -39.476845,151.66202 Z"},
       {id:"#path1130",d:"M -12.64115,367.90918 67.63343,373.80014 4.05601,317.83471 Z"},
       {id:"#path1132",d:"M 36.943406,369.43679 34.374566,421.86775 82.539536,345.28317 Z"},
       {id:"#path1134",d:"M 438.39969,121.59065 416.56488,27.922024 384.45525,79.174884 Z"},
       {id:"#path1136",d:"M -79.9353,33.250469 -196.81541,-22.714969 -71.586888,-34.497409 Z"},
       {id:"#path1138",d:"M -86.643756,377.78343 -99.487385,355.9863 -58.386586,368.94673 Z"},
       {id:"#path1140",d:"M 159.88568,367.64141 102.73005,344.66578 184.93168,355.26973 Z"},
       {id:"#path1142",d:"M 22.815093,-51.473682 -6.7261871,-0.809974 60.062494,-61.488472 Z"},
       {id:"#path1144",d:"M 316.07817,122.12813 333.41767,90.316308 286.53739,105.63322 Z"},
       {id:"#path1146",d:"M 312.03782,230.63559 300.47834,194.69954 292.13003,220.62089 Z"},
       {id:"#path1148",d:"M 301.83625,319.38293 315.96457,266.95198 291.56091,302.88803 Z"},
       {id:"#path1150",d:"M 382.02639,238.45046 366.61338,252.58888 398.08119,262.01483 Z"},
];
//start ePaths: explode paths

//************************************ LOGO Transitions ************************************
var sCircle = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var circleS = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var wCircle = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var circleW = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var bCircle = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var circleB = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var baCircle = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var circleBA = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });


//circle to stag
cPaths.forEach(function(path, index) {
 circleS 
  .add({
    targets: path.id,
    stroke: '#f90000',
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset:  1000 + 10 * index
  });
});
sPaths.forEach(function(path, index) {
 circleS 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset:  2600 + 10 * index
  });
});

//stag to circle
sPaths.forEach(function(path, index) {
sCircle 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


cPaths.forEach(function(path, index) {
sCircle 
  .add({
    targets: path.id,
    stroke: redColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//circle to wolf
wPaths.forEach(function(path, index) {
 circleW 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset:  10 * index
  });
});

//wolf to circle
wPaths.forEach(function(path, index) {
wCircle 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

cPaths.forEach(function(path, index) {
wCircle 
  .add({
    targets: path.id,
    stroke: redColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//circle to bull 
bPaths.forEach(function(path, index) {
 circleB 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset:  10 * index
  });
});

//bull to circle
bPaths.forEach(function(path, index) {
bCircle 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

cPaths.forEach(function(path, index) {
bCircle 
  .add({
    targets: path.id,
    stroke: redColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//circle to boar 
baPaths.forEach(function(path, index) {
 circleBA 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset:  10 * index
  });
});

//boar to circle
baPaths.forEach(function(path, index) {
baCircle 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

cPaths.forEach(function(path, index) {
baCircle 
  .add({
    targets: path.id,
    stroke: redColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});


//************************************ Implode Transitions ************************************
var stagImplode = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var wolfImplode = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var bullImplode = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var boarImplode = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var fadeBlack = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var curtain = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });

var pictureExpand = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });

//backgorund color change fade dark during return to directory screen
//fade to black
fadeBlack.add({
    targets: 'body',
    backgroundColor: '#000',
    duration: 2000,
    easing: 'easeInCubic',
    offset: 100
});

//curtain animation
curtain.add({
    targets: '#transitionCurtain',
    backgroundColor: '#000',
    opacity: 1,
    duration: 1000,
    easing: 'easeInCubic',
    offset: 0 
});
curtain.add({
    targets: '#transitionCurtain',
    backgroundColor: '#fff',
    opacity: 0,
    duration: 1000,
    easing: 'easeOutCubic',
    offset: 1500 
});

//stag implode 
sPaths.forEach(function(path, index) {
stagImplode	 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInCubic'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

iPaths.forEach(function(path, index) {
stagImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 100,
      easing: 'easeInCubic'
    },
    // offset: 2600 
    offset: 2600 + 2 * index
  });
});

ePaths.forEach(function(path, index) {
stagImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 150,
      easing: 'easeInCubic'
    },
    offset: 3400 + 2 * index
    // offset: 3500
  });
});
//background color change for stagImplode
// background 
stagImplode.add({
    targets: 'body',
    // targets: '#pageSelect0C',
    backgroundColor: '#e6e6e6',
    duration: 200,
    easing: 'easeInCubic',
    offset: 3700
});

//wolf implode
wPaths.forEach(function(path, index) {
wolfImplode	 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInCubic'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

iPaths.forEach(function(path, index) {
wolfImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 200,
      easing: 'easeInCubic'
    },
    // offset: 2600 
    offset: 2600 + 3 * index
  });
});

ePaths.forEach(function(path, index) {
wolfImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 150,
      easing: 'easeInCubic'
    },
    offset: 3500 + 2 * index
    // offset: 3500
  });
});
//background color change
// var background = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
// background 
wolfImplode.add({
    targets: 'body',
    // targets: '#pageSelect0C',
    backgroundColor: '#e6e6e6',
    duration: 200,
    easing: 'easeInCubic',
    offset: 3700
});


//bull implode animation
bPaths.forEach(function(path, index) {
bullImplode	 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInCubic'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

iPaths.forEach(function(path, index) {
bullImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 200,
      easing: 'easeInCubic'
    },
    // offset: 2600 
    offset: 2600 + 3 * index
  });
});

ePaths.forEach(function(path, index) {
bullImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 150,
      easing: 'easeInCubic'
    },
    offset: 3500 + 2 * index
    // offset: 3500
  });
});
//background color change
// var background = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
// background 
bullImplode.add({
    targets: 'body',
    // targets: '#pageSelect0C',
    backgroundColor: '#e6e6e6',
    duration: 200,
    easing: 'easeInCubic',
    offset: 3700
});

//boar implode animation
baPaths.forEach(function(path, index) {
boarImplode	 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInCubic'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

iPaths.forEach(function(path, index) {
boarImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 200,
      easing: 'easeInCubic'
    },
    // offset: 2600 
    offset: 2600 + 3 * index
  });
});

ePaths.forEach(function(path, index) {
boarImplode	 
  .add({
    targets: path.id,
    d: {
      value: path.d,
      duration: 150,
      easing: 'easeInCubic'
    },
    offset: 3500 + 2 * index
    // offset: 3500
  });
});
//background color change
// var background = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
// background 
boarImplode.add({
    targets: 'body',
    // targets: '#pageSelect0C',
    backgroundColor: '#e6e6e6',
    duration: 200,
    easing: 'easeInCubic',
    offset: 3700
});

//PictureExpand
//Animation for Expanding Pictures in Carousel
pictureExpand.add({
  targets: '#carousel',
  scale: 2,
  duration: 200,
  easing: 'easeInCubic',
  offset: 100
});


//************************************ Animal To Animal Transitions ************************************
var stagWolf = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var stagBull = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var stagBoar = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var wolfBull = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var bullWolf = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var wolfBoar = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var boarWolf = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var wolfStag = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var bullStag = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var boarStag = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var bullBoar = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });
var boarBull = anime.timeline({ autoplay: false, direction: 'alternate', loop: false });

var removeAllAnimations = function(){
	cPaths.forEach(function(path, index){
		anime.remove(path.id);
	});
}

//function to set the stroke color and optionally weight for all paths with matching animation ID
var setStrokeColor = function(color,width){
	document.querySelectorAll('path').forEach(function(path) {
		 path.style.stroke = color;
		if(width != 0){
			path.style.strokeWidth = width + 'px';
		}
	});
}

//function to set the fill color and fill-opacity for all paths with matching animation ID
var setFillColor = function(color, opacity){
	document.querySelectorAll('path').forEach(function(path) {
		 path.style.fill = color;
		 path.style.fillOpacity = opacity; 
	});
}


// var animals = anime.timeline({ autoplay: true, direction: 'alternate', loop: false });

// var timeline = anime.timeline({ autoplay: false, direction: 'alternate', loop: true });
// paths.forEach(function(path, index) {
sPaths.forEach(function(path, index) {
 stagBull 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset:  1000 + 10 * index
  });
});

bPaths.forEach(function(path, index) {
 stagBull 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset:  2600 + 10 * index
  });
});

//stag to wolf
sPaths.forEach(function(path, index) {
 stagWolf
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset: 1000 + 10 * index
  });
});

wPaths.forEach(function(path, index) {
 stagWolf
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset: 2600 + 10 * index
  });
});

//stagBoar
sPaths.forEach(function(path, index) {
stagBoar 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset: 1000 + 10 * index
  });
});

baPaths.forEach(function(path, index) {
stagBoar 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    // offset: 1000 + 10 * index
    offset:  2600 + 10 * index
  });
});

//WolfBull
wPaths.forEach(function(path, index) {
wolfBull 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


bPaths.forEach(function(path, index) {
wolfBull 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//BullWolf
bPaths.forEach(function(path, index) {
bullWolf 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


wPaths.forEach(function(path, index) {
bullWolf 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//bullBoar
bPaths.forEach(function(path, index) {
bullBoar 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


baPaths.forEach(function(path, index) {
bullBoar
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});


//boarBull
baPaths.forEach(function(path, index) {
boarBull 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


bPaths.forEach(function(path, index) {
boarBull
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//wolfBoar
wPaths.forEach(function(path, index) {
wolfBoar 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


baPaths.forEach(function(path, index) {
wolfBoar 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});


//boarWolf
baPaths.forEach(function(path, index) {
boarWolf 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});


wPaths.forEach(function(path, index) {
boarWolf 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//wolfstag
wPaths.forEach(function(path, index) {
wolfStag 
  .add({
    targets: path.id,
    stroke: blueColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

sPaths.forEach(function(path, index) {
wolfStag 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});


//bullstag
bPaths.forEach(function(path, index) {
bullStag 
  .add({
    targets: path.id,
    stroke: orangeColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

sPaths.forEach(function(path, index) {
bullStag 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});


//boarstag
baPaths.forEach(function(path, index) {
boarStag 
  .add({
    targets: path.id,
    stroke: purpleColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 1000 + 10 * index
    // offset:  5 * index
  });
});

sPaths.forEach(function(path, index) {
boarStag 
  .add({
    targets: path.id,
    stroke: greenColor,
    d: {
      value: path.d,
      duration: 700,
      easing: 'easeInOutQuad'
    },
    offset: 2600 + 10 * index
    // offset:  5 * index
  });
});

//0: Stag
//1: Wolf 
//2: Bull
//3: Boar
var currState = -1;
// var changeState = function(nextState, cssId, event){
var changeState = function(nextState, cssId){
	if(explode == false){
		if(currState != nextState){
			removeAllAnimations();
			if(nextState == -1){
				// var obj = document.getElementById(cssId);
				// var direction = getDirection(event,obj);
				//random num for testing
				var direction = 7;
			}
			if(currState == -1){
				if(nextState == 0){
					circleS.seek(2500);
					circleS.play();	
				}
				else if(nextState == 1){
					circleW.restart();
					circleW.play();	
				}
				else if(nextState == 2){
					circleB.restart();
					circleB.play();	
				}
				else if(nextState == 3){
					circleBA.restart();
					circleBA.play();	
				}
				currState = nextState;
			}else if(currState == 0){
				if(nextState == 1){
					stagWolf.seek(2500);
					stagWolf.play();
					currState = nextState;
				}
				else if(nextState == 2){
					stagBull.seek(2500);
					stagBull.play();
					currState = nextState;
				}
				else if(nextState == 3){
					stagBoar.seek(2500);	
					stagBoar.play();	
					currState = nextState;
				}
				else if(nextState == -1){
					if(direction != 1){	
						sCircle.seek(2500);
						sCircle.play();
						currState = nextState;
					}
				}
			}else if(currState == 1){
				if(nextState == 0){
					wolfStag.seek(2500);
					wolfStag.play();
					currState = nextState;
				}
				else if(nextState == 2){
					wolfBull.seek(2500);
					wolfBull.play();
					currState = nextState;
				}
				else if(nextState == 3){
					wolfBoar.seek(2500);
					wolfBoar.play();
					currState = nextState;
				}
				else if(nextState == -1){
					if(direction != 1 && direction != 3){
						wCircle.seek(2500);
						wCircle.play();
						currState = nextState;
					}
				}
			}else if(currState == 2){
				if(nextState == 0){
					bullStag.seek(2500);
					bullStag.play();
					currState = nextState;
				}
				else if(nextState == 1){
					bullWolf.seek(2500);
					bullWolf.play();
					currState = nextState;
				}
				else if(nextState == 3){
					bullBoar.seek(2500);
					bullBoar.play();
					currState = nextState;
				}
				else if(nextState == -1){
					if(direction != 1 && direction != 3){
						bCircle.seek(2500);
						bCircle.play();
						currState = nextState;
					}
				}
			}else if(currState == 3){
				if(nextState == 0){
					boarStag.seek(2500);
					boarStag.play();
					currState = nextState;
				}
				else if(nextState == 1){
					boarWolf.seek(2500);
					boarWolf.play();
					currState = nextState;
				}
				else if(nextState == 2){
					boarBull.seek(2500);
					boarBull.play();
					currState = nextState;
				}
				else if(nextState == -1){
					if(direction != 3){
						baCircle.seek(2500);
						baCircle.play();
						currState = nextState;
					}
				}
			}
		}
	}
}

//create our closure wrapper
var funcClosure = function(func, context, params){
	return function(){
		func.apply(context, params);	
	}
}

//create our function instances with our params in an array format 
// var stateT0 = funcClosure(changeState, this, [-1,'pageSelect0C']);
// var stateT1 = funcClosure(changeState, this, [-1,'pageSelect1C']);
// var stateT2 = funcClosure(changeState, this, [-1,'pageSelect2C']);
// var stateT3 = funcClosure(changeState, this, [-1,'pageSelect3C']);
// var state0 = funcClosure(changeState, this, [0]);
// var state1 = funcClosure(changeState, this, [1]);
// var state2 = funcClosure(changeState, this, [2]);
// var state3 = funcClosure(changeState, this, [3]);

var animationQueue = [];
var hoverHandler = function(nextState,cssId){
	var state = funcClosure(changeState, this, [nextState,cssId, event]);
	animationQueue.push(state);	
}

// window.onload = function(){
// 	setInterval(function(){
// 		while(animationQueue.length > 0){
// 			console.log('shift');
// 			(animationQueue.shift())();	
// 			setTimeout(function(){},700);
// 		}
// 	},10);

// 	// setInterval(function(){
// 	// 	console.log('second interval');
// 	// 	if(timerCurr == 0){
// 	// 		timerCurr = 1;
// 	// 	}
// 	// },1000);
// }//check which direction we stopped hovering in
//	- if mouse left the bottom, trigger circle transition
//	- otherwise exit should have no effect
//: https://css-tricks.com/direction-aware-hover-effects/
var getDirection =  function (event,obj) {
	var xCor = event.pageX;	
	var yCor = event.pageY;	
	var box = obj.getBoundingClientRect();
	const { width, height, top, left } = obj.getBoundingClientRect();
	var h = height;
	var w = width;
        // calculate the x and y to get an angle to the center of the div from that x and y.
        // gets the x value relative to the center of the DIV and "normalize" it
        var x = (xCor - left - (w / 2)) * (w > h ? (h / w) : 1),
        y = (yCor - top - (h / 2)) * (h > w ? (w / h) : 1),
        // the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);
        // first calculate the angle of the point,
        // add 180 deg to get rid of the negative values
        // divide by 90 to get the quadrant
        // add 3 and do a modulo by 4 to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/
        direction = Math.round((((Math.atan2(y, x) * (180 / Math.PI)) + 180) / 90) + 3) % 4;
    return direction;
};

var hideItem = function(eId){
    //hides an element from the document
    var e = document.getElementById(eId);
    e.style.visibility = 'hidden'; 
}

var showItem = function(eId){
    //hides an element from the document
    var e = document.getElementById(eId);
    e.style.visibility = 'visible'; 
}

var removeItem = function(elemId){
	var e = document.getElementById(elemId);
	e.parentNode.removeChild(e);
}

var addItem = function(parentId,elemTag,elemId,innerHTML,classNames){
    var pID = document.getElementById(parentId);
    var newElem = document.createElement(elemTag);
    newElem.setAttribute('id', elemId);
    if(innerHTML != ''){
        newElem.innerHTML = innerHTML;
    }
    if(classNames.length != 0){
	for(var i = 0; i < classNames.length; i++){
            newElem.classList.add(classNames[i]);   
	}
    }
    pID.appendChild(newElem);
}

var imageNum = 0;
var addImage = function(parentId,source){
    var pID = document.getElementById(parentId);
    var newElem = document.createElement('img');
    newElem.setAttribute('id', 'card' + imageNum);
    imageNum = imageNum + 1;
    newElem.src = source;
    newElem.alt = "Could not load image";
    newElem.classList.add('cImg');   
    pID.appendChild(newElem);
}

function setTitle(linkNum){
	if(linkNum == 0){
		addItem('floatContainer','h1','pageTitle','Home',[]);
	}else if(linkNum == 1){
		addItem('floatContainer','h1','pageTitle','Coding Projects',[]);
	}else if(linkNum == 2){
		addItem('floatContainer','h1','pageTitle','Portfolio',[]);
	}else if(linkNum == 3){
		addItem('floatContainer','h1','pageTitle','About Me',[]);
	}	
}
//function called when a link in the directory is clicked
//Hides items and on the first time through will add the neccesary features for rendering the carousel
var hideAnimationStage = function(linkNum){
	explode = true;
	hideItem("pageSelect0C");	
	hideItem("pageSelect1C");	
	hideItem("pageSelect2C");	
	hideItem("pageSelect3C");	
	setTitle(linkNum);
	showItem('pageTitle');
	var tileContainer = document.getElementById('tileContainer');
	var floatContainer = document.getElementById('floatContainer');
	tileContainer.style.marginTop = floatContainer.getBoundingClientRect().height.toString() + 'px';
	var h = document.getElementById("homeIcon").offsetHeight;
	var w = document.getElementById("homeIcon").offsetWidth;
	//set the appropriate height and width of the home icon for a mobile device
	if(isMobileDevice()){
		document.getElementById("homeIconSVG").setAttribute("viewBox", "0 0 " + w*8 + " " + h*8);
		document.getElementById("homeIcon").style.width = '15vw';
		document.getElementById("homeIcon").style.height = '15vw';
	}
	else{
		document.getElementById("homeIconSVG").setAttribute("viewBox", "0 0 " + w*2 + " " + h*2);
	}
	setTimeout(function(){
		//Need to make it so we are destroying and reloading the carousel each time
		//right now we are just loading/reloading it (check mobile performance before blowing away old version)
		// if(carouselLaunched == 0){
			carouselLaunch(linkNum);
			// carouselLaunched = 1;
		// }
		// else{
			// showItem('carousel');
			// showItem('fig');
			// showItem('nav');
			// showItem('prev');
			// showItem('next');
		// }
	},1500);		
	setTimeout(function(){
		hideItem("animationContainer");
		showItem("homeIcon");	
		setStrokeColor("#000000",0.4);		
	},1500);		
}

var hoverOnHomeIcon = function(){
	var home = document.getElementById('homeIconSVG');
	home.addEventListener('mouseover',function(){
		setStrokeColor(redColor,0);	
		// setFillColor('#999999', '1');
		
	})
	home.addEventListener('mouseout',function(){
		setStrokeColor('#000',0);	
		// setFillColor('none', '1');
	})
}

var revealAnimationStage = function(click){
	imageNum = 0;
	curtain.restart();
	curtain.play();
	explode = false;
	changeState(-1);	
	setTimeout(function(){
		hideItem("homeIcon");
		showItem("pageSelect0C");	
		showItem("pageSelect1C");	
		showItem("pageSelect2C");	
		showItem("pageSelect3C");	
		removeItem('pageTitle');
		showItem("animationContainer");
		//ORGINALLY HIDE VERSION: Switched to Destory/Remove Version so loading in different carousels
		//will be seamless and we also get the carousel spinning animation everytime instead of only once.
		//May want to balance this for mobile/slow internet applications. Will definitely need to compress images 
		//either way to boost performance (particularly on mobile)
		// hideItem("carousel");
		// hideItem("fig");
		// hideItem("nav");
		// hideItem("prev");
		// hideItem("next");
		hideItem("carouselTitle");
		removeItem("carouselTitle");
		removeItem("carousel");
		removeItem("infoCard");
		fadeBlack.restart();
		fadeBlack.play();

	}, 1000);
	setTimeout(function(){setStrokeColor(redColor,0.4);},1800);
		
}

//var clickReverse = function(click){
////getBlack div overscreen and have it fade to dark and then fade in with svg content	
//	revealAnimationStage(click);
//};
var currLink = 0;
var clickAnimation = function(click){
	if(!isMobileDevice()){
		if(click == 0){
			stagImplode.seek(2500);
			stagImplode.play();
			hideAnimationStage(0);
			currLink = 0;
		}
		else if(click == 1){
			wolfImplode.seek(2500);
			wolfImplode.play();
			hideAnimationStage(1);
			currLink = 1;
		}
		else if(click == 2){
			bullImplode.seek(2500);
			bullImplode.play();
			hideAnimationStage(2);
			currLink = 2;
		}
		else if(click == 3){
			boarImplode.seek(2500);
			boarImplode.play();
			hideAnimationStage(3);
			currLink = 3;
		}

	}
	else{ 
		//if we are on a mobile device we don't have hover events so we should stall out
		//the hover state machine by setting explode = true; and then manually perform the transformations
		//from whatever state we are currently in, to the state that has been clicked on. Then we finish by 
		//performing the implode/explode animation and calling the hideAnimationStage() function with the appropriate
		//paramter corresponding to whatever link was clicked
		if(click == 0){
			// explode = true;
			// circleS.seek(2500);
			// circleS.play();
			// setTimeout(function(){
			// 	stagImplode.seek(2500);
			// 	stagImplode.play();
			// 	hideAnimationStage(0);
			// },1500);
			explode = true;
			if(currState == -1){
				// explode = true;
				// circleS.seek(2500);
				// circleS.play();
				setTimeout(function(){
					stagImplode.seek(2500);
					stagImplode.play();
					hideAnimationStage(0);
				},1500);
			}
			else if(currState == 0){
				setTimeout(function(){
					stagImplode.seek(2500);
					stagImplode.play();
					hideAnimationStage(0);
				},1500);
			}else if(currState == 1){
				// explode = true;
				// wolfStag.seek(2500);
				// wolfStag.play();
				setTimeout(function(){
					stagImplode.seek(2500);
					stagImplode.play();
					hideAnimationStage(0);
				},1500);
			}else if(currState == 2){
				// explode = true;
				// bullStag.seek(2500);
				// bullStag.play();
				setTimeout(function(){
					stagImplode.seek(2500);
					stagImplode.play();
					hideAnimationStage(0);
				},1500);
			}else if(currState == 3){
				// explode = true;
				// boarStag.seek(2500);
				// boarStag.play();
				setTimeout(function(){
					stagImplode.seek(2500);
					stagImplode.play();
					hideAnimationStage(0);
				},1500);
			}
		}
		else if(click == 1){
			explode = true;
			if(currState == -1){
				// explode = true;
				// circleW.restart();
				// circleW.play();
				setTimeout(function(){
					wolfImplode.seek(2500);
					wolfImplode.play();
					hideAnimationStage(1);
				},1500);
			}else if(currState == 0){
				// explode = true;
				// stagWolf.seek(2500);
				// stagWolf.play();
				setTimeout(function(){
					wolfImplode.seek(2500);
					wolfImplode.play();
					hideAnimationStage(1);
				},1500);
			}else if(currState == 1){
				// explode = true;
				setTimeout(function(){
					wolfImplode.seek(2500);
					wolfImplode.play();
					hideAnimationStage(1);
				},1500);
			}else if(currState == 2){
				// explode = true;
				// bullWolf.seek(2500);
				// bullWolf.play();
				setTimeout(function(){
					wolfImplode.seek(2500);
					wolfImplode.play();
					hideAnimationStage(1);
				},1500);
			}else if(currState == 3){
				// explode = true;
				// boarWolf.seek(2500);
				// boarWolf.play();
				setTimeout(function(){
					wolfImplode.seek(2500);
					wolfImplode.play();
					hideAnimationStage(1);
				},1500);
			}
		}
		else if(click == 2){
			explode = true;
			if(currState == -1){
				// explode = true;
				// circleB.restart();
				// circleB.play();
				setTimeout(function(){
					bullImplode.seek(2500);
					bullImplode.play();
					hideAnimationStage(2);
				},1500);
			}else if(currState == 0){
				// explode = true;
				// stagBull.seek(2500);
				// stagBull.play();
				setTimeout(function(){
					bullImplode.seek(2500);
					bullImplode.play();
					hideAnimationStage(2);
				},1500);
			}else if(currState == 1){
				// explode = true;
				// wolfBull.seek(2500);
				// wolfBull.play();
				setTimeout(function(){
					bullImplode.seek(2500);
					bullImplode.play();
					hideAnimationStage(2);
				},1500);
			}else if(currState == 2){
				// explode = true;
				setTimeout(function(){
					bullImplode.seek(2500);
					bullImplode.play();
					hideAnimationStage(2);
				},1500);
			}else if(currState == 3){
				// explode = true;
				// boarBull.seek(2500);
				// boarBull.play();
				setTimeout(function(){
					bullImplode.seek(2500);
					bullImplode.play();
					hideAnimationStage(2);
				},1500);
			}
		}
		else if(click == 3){
			explode = true;
			if(currState == -1){
				// explode = true;
				// circleBA.restart();
				// circleBA.play();
				setTimeout(function(){
					boarImplode.seek(2500);
					boarImplode.play();
					hideAnimationStage(3);
				},1500);
			}else if(currState == 0){
				// explode = true;
				// stagBoar.seek(2500);
				// stagBoar.play();
				setTimeout(function(){
					boarImplode.seek(2500);
					boarImplode.play();
					hideAnimationStage(3);
				},1500);
			}else if(currState == 1){
				// explode = true;
				// wolfBoar.seek(2500);
				// wolfBoar.play();
				setTimeout(function(){
					boarImplode.seek(2500);
					boarImplode.play();
					hideAnimationStage(3);
				},1500);
			}else if(currState == 2){
				// explode = true;
				// bullBoar.seek(2500);
				// bullBoar.play();
				setTimeout(function(){
					boarImplode.seek(2500);
					boarImplode.play();
					hideAnimationStage(3);
				},1500);
			}else if(currState == 3){
				// explode = true;
				setTimeout(function(){
					boarImplode.seek(2500);
					boarImplode.play();
					hideAnimationStage(3);
				},1500);
			}
		}
	}

};

var createTile = function(tileId,imageSrc,header,headerDescrip,date){
	var div1Classes = ['w3-card-4', 'w3-margin', 'w3-white'];
	var div2Classes = ['w3-container'];
	addItem('tileContainer','div',tileId,'',div1Classes);
	addImage(tileId,imageSrc);
	addItem(tileId,'div','div2','',div2Classes);
	addItem('div2','h3','head',header,[]);
	document.getElementById('head').style.fontWeight = 'bold';
	addItem('div2','h5','headerD',headerDescrip,[]);
	addItem('headerD','span','',date,["w3-opacity"]);
}

//function collection to load images under stag/wolf/bull/boar links
var stagLinkImages = function(){
	addImage('fig','../../media/projects/Carousel/auroraSilhouette.jpg');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
}

var wolfLinkImages = function(){
	addImage('fig','../../media/projects/Carousel/tibetScreenshot.png');
	addImage('fig','../../media/projects/Carousel/HopPhoto.jpg');
	addImage('fig','../../media/projects/Carousel/leaflet.gif');
	addImage('fig','../../media/projects/Carousel/rayTrace.jpg');
	addImage('fig','../../media/projects/Carousel/recursiveRayTracing.png');
	addImage('fig','../../media/projects/Carousel/threeJSSphere.png');
	addImage('fig','../../media/projects/Carousel/teapot.png');
	addImage('fig','../../media/projects/Carousel/arm.png');
}

var bullLinkImages = function(){
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
}

var boarLinkImages = function(){
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
	addImage('fig','../../media/projects/Carousel/');
}

var carouselLaunch = function(linkNum){
	//function to setup hover color change on homeicon
	hoverOnHomeIcon();
	addItem('tileContainer','div','carousel','',['carousel']);
	showItem('carousel');
	document.getElementById('carousel').setAttribute('data-gap',12);
	addItem('carousel','div','fig','',[]);
	showItem('fig');
	addItem('carousel','nav','nav','',[]);
	showItem('nav');
	addItem('nav','button','prev','Prev',['nav','prev']);
	showItem('prev');
	addItem('nav','button','next','Next',['nav', 'next']);
	showItem('next');
	//carousel images
	if(linkNum == 0){
		stagLinkImages();	
	}else if(linkNum == 1){
		wolfLinkImages();	
	}else if(linkNum == 2){
		bullLinkImages();	
	}else if(linkNum == 3){
		boarLinkImages();	
	}
//javacsript to control carousel rotation
	var carousels = document.querySelectorAll('.carousel');
	for (var i = 0; i < carousels.length; i++) {
		carousel(carousels[i]);
	}

	function carousel(root) {
		var
			// figure = root.querySelector('figure'),
			figure = root.querySelector('#fig'),
			nav = root.querySelector('nav'),
			images = figure.children,
			n = images.length,
			gap = root.dataset.gap || 0,
			bfc = 'bfc' in root.dataset,
			theta =  2 * Math.PI / n,
			currImage = 0
		;
		
		setupCarousel(n, parseFloat(getComputedStyle(images[0]).width));
		window.addEventListener('resize', () => { 
			setupCarousel(n, parseFloat(getComputedStyle(images[0]).width)) 
		});

		setupNavigation();
		var buttonHeight = document.getElementById('next').offsetHeight;
		setupCardClick(linkNum);
		function setupCarousel(n, s) {
			//add in title for carousel slides
			addItem('tileContainer','h1','carouselTitle','',['data-morph','carouselTitle']);
			document.getElementById('carouselTitle').style.bottom = (buttonHeight * 1.5) + 'px';
			var apothem = s / (2 * Math.tan(Math.PI / n));
			
			for (var i = 0; i < n; i++){
				images[i].style.padding = `${gap}vw`;
			}

			for (i = 0; i < n; i++) {
				var width = document.getElementById('carousel').offsetWidth;
				var radius = 1.2*((width)/2)/(Math.tan(360/8));
				images[i].style.padding = `${gap}vw`;
				if(i == 0){
					images[i].style.transform = `translateZ(${-radius}px)`;
				}
				images[i].style.transform = `rotateY(${i * theta}rad) translateZ(${radius}px)`;
			}

			if (bfc)
				for (i = 0; i < n; i++)
					 images[i].style.backfaceVisibility = 'hidden';
			rotateCarousel(currImage);
		}

		function setupNavigation() {
			var navig = document.getElementById('nav');	
			navig.addEventListener('click', onClick, true);
			function onClick(e) {
				e.stopPropagation();
				var t = e.target;
				if (t.tagName.toUpperCase() != 'BUTTON')
					return;
				if (t.classList.contains('next')) {
					currImage++;
				}
				else {
					currImage--;
				}
				rotateCarousel(currImage);
			}
		}

		//function to solve javascript modulus bug
		function mod(n, m) {
			  return ((n % m) + m) % m;
		}

		//function to fill the card content on a click event
		//NOTE: The infoObjects for this are defined near the top of the file
		function setCardContent(infoObject, numCard){
			var cardElem = document.getElementById(numCard);
			cardElem.classList.add('expand');
			var translation = cardElem.style.transform;
			cardElem.style.transform = translation + ' scale(5)';
			var infoElem = document.getElementById('infoCard');
			infoElem.classList.add('showCard');
			document.getElementById('cardLink').href = infoObject[numCard].link;
			document.getElementById('cardImgLink').src = infoObject[numCard].linkImg;
			var infoCard = document.getElementById('infoCard');
			infoCard.childNodes[1].innerHTML = infoObject[numCard].title;	
			infoCard.childNodes[2].innerHTML = infoObject[numCard].subTitle;
			infoCard.childNodes[3].innerHTML = infoObject[numCard].content;
		}
		
		//helper function to pass in correct object to other helper functions
		function cardClickSwitchBoard(infoObj, cardID){
			var num = mod(currImage,8);
			if(cardID == num){
				if(num == 0){
					setCardContent(infoObj,'card0');
				}else if(num == 1){
					setCardContent(infoObj,'card1');
				}else if(num == 2){
					setCardContent(infoObj,'card2');
				}else if(num == 3){
					setCardContent(infoObj,'card3');
				}else if(num == 4){
					setCardContent(infoObj,'card4');
				}else if(num == 5){
					setCardContent(infoObj,'card5');
				}else if(num == 6){
					setCardContent(infoObj,'card6');
				}else if(num == 7){
					setCardContent(infoObj,'card7');
				}
			}
		}

		//this is a closure to create a click event for each individual image
		//	- i.e each image has its own individual cardID local variable that is different
		//	  and can be compared to the currImage value
		function cardClick(cardID, linkNum){
			if(linkNum == 0){
				return function(){
					cardClickSwitchBoard(stagContent, cardID);
				}
			}
			else if(linkNum == 1){
				return function(){
					cardClickSwitchBoard(wolfContent, cardID);
				}
			}else if(linkNum == 2){
				return function(){
					cardClickSwitchBoard(wolfContent, cardID);
				}
					
			}else if(linkNum == 3){
				return function(){
					cardClickSwitchBoard(wolfContent, cardID);
				}
			}else if(linkNum == 3){
				return function(){
					cardClickSwitchBoard(wolfContent, cardID);
				}
			}
		}
		function setupCardClick(linkNum) {
			for(var i =0; i < imageNum; i ++){
				var card = document.getElementById('card' + i);	
				card.addEventListener('click',cardClick(i,linkNum) , true);
			
			}
			//This is the info div that will become visible on cardClick()
			addItem('tileContainer','div','infoCard','',['infoCard']);
			//this is just a holder for the info and pic that will be filled on click
			// ********* NEED TO FIGURE OUT HOW I WANT THIS PROJECT PRESENTATION TO LOOK ******** 
			// addImage('infoCard','');
			// var imageC = document.getElementById('card' + (imageNum - 1));
			// imageC.style.position = 'absolute';
			// imageC.style.left = 0;
			// imageC.style.height = '25%';
			// imageC.style.width = '20%';
			// imageC.style.clipPath = 'circle(10% at 10% 10%)';
			addItem('infoCard','div','x','',['close']);
			var x = document.getElementById('x');
			x.addEventListener('click', xClick, true);

			addItem('infoCard','h2','','John Doe',['cardTitle']);
			addItem('infoCard','p','','Architect and Engineer',['cardSubTitle']);
			addItem('infoCard','p','','Hope this works',['cardContent']);
			addItem('infoCard','a','cardLink','',[]);
			addItem('cardLink','img','cardImgLink','',['cardImgLink']);
		}

		function xClick(event){
			var num = mod(currImage,8);
			document.getElementById('infoCard').classList.remove('showCard');
			var curCard = document.getElementById('card' + num);
			curCard.classList.remove('expand');	
			var transf = curCard.style.transform;
			curCard.style.transform = transf + 'scale(.2)';
			var cardImg = document.getElementById('cardImgLink');
			setTimeout(function(){cardImg.src = '';},400);
		}

		function rotateCarousel(imageIndex) {
			figure.style.transform = `rotateY(${imageIndex * -theta}rad)`;
			updateClickable(mod(currImage,8));
			updateMorphText(mod(currImage,8));
		}
		function updateClickable(cImage){
			for(var i=0; i < 8; i ++){
				var card = document.getElementById('card' + i);
				if(i == cImage){
					card.classList.add('clickable');	
				}else{
					card.classList.remove('clickable');
				}
			}	
		}
	}
}


//morphing text experiment
/**
 * morpher() morph a text to another
 * It loops over chars to morph the text
 *
 * @param {Element} element
 * @param {String} start
 * @param {String} end
 */
const morpher = (element, start, end) => {
  /**
   * Write parameters
   *
   * [1] : chars is an array of characters you choose to randomly morph the text between start and end
   * [2] : duration is the duration of the global morph
   * [3] : frameRate is the speed of the morph for each letter
   */
  const chars     = ['a','b','c','d','e','f','g','0','1','2','3','4','5','6','7','8','9','%','$','?','!']; /*[1]*/
  const duration  = 0.5;  /*[2]*/
  const frameRate = 25; /*[3]*/

  /**
   * Write text variables
   */
  const string = start.split('');
  const result = end.split('');
  const slen   = string.length;
  const rlen   = result.length;

  /**
   * Write time variables
   */
  let present   = new Date();
  let past      = present.getTime();
  let count     = 0;
  let spentTime = 0;
  // SplitTime  = milliseconds / letters
  let splitTime = (duration * 1000) / Math.max(slen, rlen);

  const update = () => {
    // Update present date and spent time
    present    = new Date();
    spentTime += present.getTime() - past;

    // Random letters
    for (let i = count; i < Math.max(slen, rlen); i++) {
      const random = Math.floor(Math.random() * (chars.length - 1));
      // Change letter
      string[i] = chars[random];
    }

    // Morph letters from start to end
    if (spentTime >= splitTime) {
      // Update count of letters to morph
      count += Math.floor(spentTime / splitTime);
      // Morphing
      for (let j = 0; j < count; j++) {
        string[j] = result[j] || null;
      }
      // Reset spent time
      spentTime = 0;
    }

    // Update DOM
    element.textContent = string.join('');

    // Save present date
    past = present.getTime();

    // Loop
    if (count < Math.max(slen, rlen)) {
      // Only use a setTimeout if the frameRate is lower than 60FPS
      // Remove the setTimeout if the frameRate is equal to 60FPS
      setTimeout(() => {
        window.requestAnimationFrame(update);
      }, 500 / frameRate);
    }
  };

  // Start loop
  update();
}
function morphCardTitles(){
	var words;
	if(currLink == 0){
		words = [stagContent.card0.title, 
			 stagContent.card1.title,
			 stagContent.card2.title,
			 stagContent.card3.title,
			 stagContent.card4.title,
			 stagContent.card5.title,
			 stagContent.card6.title,
			 stagContent.card7.title];
	}else if(currLink == 1){
		words = [wolfContent.card0.title,
			 wolfContent.card1.title,
			 wolfContent.card2.title,
			 wolfContent.card3.title,
			 wolfContent.card4.title,
			 wolfContent.card5.title,
			 wolfContent.card6.title,
			 wolfContent.card7.title];
	}else if(currLink == 2){
		words = [bullContent.card0.title,
			 bullContent.card1.title,
			 bullContent.card2.title,
			 bullContent.card3.title,
			 bullContent.card4.title,
			 bullContent.card5.title,
			 bullContent.card6.title,
			 bullContent.card7.title];
	}else if(currLink == 3){
		words = [boarContent.card0.title,
			 boarContent.card1.title,
			 boarContent.card2.title,
			 boarContent.card3.title,
			 boarContent.card4.title,
			 boarContent.card5.title,
			 boarContent.card6.title,
			 boarContent.card7.title];
	}
	return words;
}

function updateMorphText(counter){
    const morph  = document.querySelector('.data-morph');
    const button = document.querySelector('.js-morph-trigger');
    // const words  = ["Tibet", "Architecture", "Leaflet", "Ray Tracing", "Phong Shading", "ThreeJS", "Utah Teapot", "Skinning"];
    // const words  = ["Tibet", "Architecture", "Leaflet", "Ray Tracing", "Phong Shading", "ThreeJS", "Utah Teapot", "Skinning"];
    var words = morphCardTitles();
    const start = morph.innerHTML;
    const end   = words[counter];
    morpher(morph, start, end);
}

var rect = document.getElementById('pageSelect0C').getBoundingClientRect();
var body = document.getElementsByTagName('body');
body[0].onmousemove = function(e) {
	if(e.clientY > rect.bottom){
		changeState(-1);
	}
};

//This is Used just to make sure we have consistent stroke weight for our animations
setStrokeColor(redColor,0.4);

function colorRouter(){
	if(currState == -1){
		return '#808080';
	}else if(currState == 0){
		return greenColor;	
	}else if(currState == 1){
		return blueColor;	
	}else if(currState == 2){
		return orangeColor;
	}else if(currState == 3){
		return purpleColor;
	}
}

// window.onload
window.onload = function(){
	// alert('onload');
	//will need to addmodificationt to force 'fake hovering' and change color of links while swiping
	//	- consider adding class to class list instead of individually adding style
	//	- could also write function to just add/change color of pageSelect 
	var body = document.getElementsByTagName('body')[0];
	// var hammertime = new Hammer(body);
	var hammer = new Hammer.Manager(body);
	var swipe = new Hammer.Swipe();
	hammer.add(swipe);
	hammer.on('swipeleft', function(ev) {
		if(isMobileDevice() && explode == false){
			//default color
			document.getElementById('pageSelect' + currState).style.color = '#808080';
			changeState(mod((currState + 1),5) - 1);
			document.getElementById('pageSelect' + currState).style.color = colorRouter();
		}
	});

	hammer.on('swiperight', function(ev) {
		if(isMobileDevice() && explode == false){
			//default color
			document.getElementById('pageSelect' + currHighlight + 'C').style.color = '#808080';
			changeState(mod((currState - 1),5) - 1);
			// currHighlight = currHighlight - 1;
			document.getElementById('pageSelect' + currHighlight + 'C').style.color = colorRouter();
		}
	});
}
